
HC05_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003630  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080037bc  080037bc  000137bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003824  08003824  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003824  08003824  00013824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800382c  0800382c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800382c  0800382c  0001382c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003830  08003830  00013830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  2000000c  08003840  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08003840  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab0e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ab1  00000000  00000000  0002ab4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000960  00000000  00000000  0002c600  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000868  00000000  00000000  0002cf60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021a7e  00000000  00000000  0002d7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000894a  00000000  00000000  0004f246  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000caece  00000000  00000000  00057b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00122a5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002470  00000000  00000000  00122adc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080037a4 	.word	0x080037a4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080037a4 	.word	0x080037a4

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f0:	f000 b972 	b.w	80004d8 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	4604      	mov	r4, r0
 8000214:	4688      	mov	r8, r1
 8000216:	2b00      	cmp	r3, #0
 8000218:	d14b      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021a:	428a      	cmp	r2, r1
 800021c:	4615      	mov	r5, r2
 800021e:	d967      	bls.n	80002f0 <__udivmoddi4+0xe4>
 8000220:	fab2 f282 	clz	r2, r2
 8000224:	b14a      	cbz	r2, 800023a <__udivmoddi4+0x2e>
 8000226:	f1c2 0720 	rsb	r7, r2, #32
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	fa20 f707 	lsr.w	r7, r0, r7
 8000232:	4095      	lsls	r5, r2
 8000234:	ea47 0803 	orr.w	r8, r7, r3
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023e:	0c23      	lsrs	r3, r4, #16
 8000240:	fbb8 f7fe 	udiv	r7, r8, lr
 8000244:	fa1f fc85 	uxth.w	ip, r5
 8000248:	fb0e 8817 	mls	r8, lr, r7, r8
 800024c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000250:	fb07 f10c 	mul.w	r1, r7, ip
 8000254:	4299      	cmp	r1, r3
 8000256:	d909      	bls.n	800026c <__udivmoddi4+0x60>
 8000258:	18eb      	adds	r3, r5, r3
 800025a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025e:	f080 811b 	bcs.w	8000498 <__udivmoddi4+0x28c>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 8118 	bls.w	8000498 <__udivmoddi4+0x28c>
 8000268:	3f02      	subs	r7, #2
 800026a:	442b      	add	r3, r5
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0fe 	udiv	r0, r3, lr
 8000274:	fb0e 3310 	mls	r3, lr, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000280:	45a4      	cmp	ip, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x8c>
 8000284:	192c      	adds	r4, r5, r4
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x290>
 800028e:	45a4      	cmp	ip, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x290>
 8000294:	3802      	subs	r0, #2
 8000296:	442c      	add	r4, r5
 8000298:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800029c:	eba4 040c 	sub.w	r4, r4, ip
 80002a0:	2700      	movs	r7, #0
 80002a2:	b11e      	cbz	r6, 80002ac <__udivmoddi4+0xa0>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c6 4300 	strd	r4, r3, [r6]
 80002ac:	4639      	mov	r1, r7
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xbe>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80eb 	beq.w	8000492 <__udivmoddi4+0x286>
 80002bc:	2700      	movs	r7, #0
 80002be:	e9c6 0100 	strd	r0, r1, [r6]
 80002c2:	4638      	mov	r0, r7
 80002c4:	4639      	mov	r1, r7
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f783 	clz	r7, r3
 80002ce:	2f00      	cmp	r7, #0
 80002d0:	d147      	bne.n	8000362 <__udivmoddi4+0x156>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd0>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2c4>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4698      	mov	r8, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa0>
 80002ea:	e9c6 4800 	strd	r4, r8, [r6]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa0>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xe8>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 808f 	bne.w	800041c <__udivmoddi4+0x210>
 80002fe:	1b49      	subs	r1, r1, r5
 8000300:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000304:	fa1f f885 	uxth.w	r8, r5
 8000308:	2701      	movs	r7, #1
 800030a:	fbb1 fcfe 	udiv	ip, r1, lr
 800030e:	0c23      	lsrs	r3, r4, #16
 8000310:	fb0e 111c 	mls	r1, lr, ip, r1
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb08 f10c 	mul.w	r1, r8, ip
 800031c:	4299      	cmp	r1, r3
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0x124>
 8000320:	18eb      	adds	r3, r5, r3
 8000322:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4299      	cmp	r1, r3
 800032a:	f200 80cd 	bhi.w	80004c8 <__udivmoddi4+0x2bc>
 800032e:	4684      	mov	ip, r0
 8000330:	1a59      	subs	r1, r3, r1
 8000332:	b2a3      	uxth	r3, r4
 8000334:	fbb1 f0fe 	udiv	r0, r1, lr
 8000338:	fb0e 1410 	mls	r4, lr, r0, r1
 800033c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000340:	fb08 f800 	mul.w	r8, r8, r0
 8000344:	45a0      	cmp	r8, r4
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x14c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x14a>
 8000350:	45a0      	cmp	r8, r4
 8000352:	f200 80b6 	bhi.w	80004c2 <__udivmoddi4+0x2b6>
 8000356:	4618      	mov	r0, r3
 8000358:	eba4 0408 	sub.w	r4, r4, r8
 800035c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000360:	e79f      	b.n	80002a2 <__udivmoddi4+0x96>
 8000362:	f1c7 0c20 	rsb	ip, r7, #32
 8000366:	40bb      	lsls	r3, r7
 8000368:	fa22 fe0c 	lsr.w	lr, r2, ip
 800036c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000370:	fa01 f407 	lsl.w	r4, r1, r7
 8000374:	fa20 f50c 	lsr.w	r5, r0, ip
 8000378:	fa21 f30c 	lsr.w	r3, r1, ip
 800037c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000380:	4325      	orrs	r5, r4
 8000382:	fbb3 f9f8 	udiv	r9, r3, r8
 8000386:	0c2c      	lsrs	r4, r5, #16
 8000388:	fb08 3319 	mls	r3, r8, r9, r3
 800038c:	fa1f fa8e 	uxth.w	sl, lr
 8000390:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000394:	fb09 f40a 	mul.w	r4, r9, sl
 8000398:	429c      	cmp	r4, r3
 800039a:	fa02 f207 	lsl.w	r2, r2, r7
 800039e:	fa00 f107 	lsl.w	r1, r0, r7
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1e 0303 	adds.w	r3, lr, r3
 80003a8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003ac:	f080 8087 	bcs.w	80004be <__udivmoddi4+0x2b2>
 80003b0:	429c      	cmp	r4, r3
 80003b2:	f240 8084 	bls.w	80004be <__udivmoddi4+0x2b2>
 80003b6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ba:	4473      	add	r3, lr
 80003bc:	1b1b      	subs	r3, r3, r4
 80003be:	b2ad      	uxth	r5, r5
 80003c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c4:	fb08 3310 	mls	r3, r8, r0, r3
 80003c8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003cc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d0:	45a2      	cmp	sl, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1e 0404 	adds.w	r4, lr, r4
 80003d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003dc:	d26b      	bcs.n	80004b6 <__udivmoddi4+0x2aa>
 80003de:	45a2      	cmp	sl, r4
 80003e0:	d969      	bls.n	80004b6 <__udivmoddi4+0x2aa>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4474      	add	r4, lr
 80003e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ea:	fba0 8902 	umull	r8, r9, r0, r2
 80003ee:	eba4 040a 	sub.w	r4, r4, sl
 80003f2:	454c      	cmp	r4, r9
 80003f4:	46c2      	mov	sl, r8
 80003f6:	464b      	mov	r3, r9
 80003f8:	d354      	bcc.n	80004a4 <__udivmoddi4+0x298>
 80003fa:	d051      	beq.n	80004a0 <__udivmoddi4+0x294>
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d069      	beq.n	80004d4 <__udivmoddi4+0x2c8>
 8000400:	ebb1 050a 	subs.w	r5, r1, sl
 8000404:	eb64 0403 	sbc.w	r4, r4, r3
 8000408:	fa04 fc0c 	lsl.w	ip, r4, ip
 800040c:	40fd      	lsrs	r5, r7
 800040e:	40fc      	lsrs	r4, r7
 8000410:	ea4c 0505 	orr.w	r5, ip, r5
 8000414:	e9c6 5400 	strd	r5, r4, [r6]
 8000418:	2700      	movs	r7, #0
 800041a:	e747      	b.n	80002ac <__udivmoddi4+0xa0>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f703 	lsr.w	r7, r0, r3
 8000424:	4095      	lsls	r5, r2
 8000426:	fa01 f002 	lsl.w	r0, r1, r2
 800042a:	fa21 f303 	lsr.w	r3, r1, r3
 800042e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000432:	4338      	orrs	r0, r7
 8000434:	0c01      	lsrs	r1, r0, #16
 8000436:	fbb3 f7fe 	udiv	r7, r3, lr
 800043a:	fa1f f885 	uxth.w	r8, r5
 800043e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000442:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000446:	fb07 f308 	mul.w	r3, r7, r8
 800044a:	428b      	cmp	r3, r1
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x256>
 8000452:	1869      	adds	r1, r5, r1
 8000454:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000458:	d22f      	bcs.n	80004ba <__udivmoddi4+0x2ae>
 800045a:	428b      	cmp	r3, r1
 800045c:	d92d      	bls.n	80004ba <__udivmoddi4+0x2ae>
 800045e:	3f02      	subs	r7, #2
 8000460:	4429      	add	r1, r5
 8000462:	1acb      	subs	r3, r1, r3
 8000464:	b281      	uxth	r1, r0
 8000466:	fbb3 f0fe 	udiv	r0, r3, lr
 800046a:	fb0e 3310 	mls	r3, lr, r0, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb00 f308 	mul.w	r3, r0, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x27e>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000480:	d217      	bcs.n	80004b2 <__udivmoddi4+0x2a6>
 8000482:	428b      	cmp	r3, r1
 8000484:	d915      	bls.n	80004b2 <__udivmoddi4+0x2a6>
 8000486:	3802      	subs	r0, #2
 8000488:	4429      	add	r1, r5
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000490:	e73b      	b.n	800030a <__udivmoddi4+0xfe>
 8000492:	4637      	mov	r7, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e709      	b.n	80002ac <__udivmoddi4+0xa0>
 8000498:	4607      	mov	r7, r0
 800049a:	e6e7      	b.n	800026c <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x8c>
 80004a0:	4541      	cmp	r1, r8
 80004a2:	d2ab      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a8:	eb69 020e 	sbc.w	r2, r9, lr
 80004ac:	3801      	subs	r0, #1
 80004ae:	4613      	mov	r3, r2
 80004b0:	e7a4      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b2:	4660      	mov	r0, ip
 80004b4:	e7e9      	b.n	800048a <__udivmoddi4+0x27e>
 80004b6:	4618      	mov	r0, r3
 80004b8:	e795      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004ba:	4667      	mov	r7, ip
 80004bc:	e7d1      	b.n	8000462 <__udivmoddi4+0x256>
 80004be:	4681      	mov	r9, r0
 80004c0:	e77c      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c2:	3802      	subs	r0, #2
 80004c4:	442c      	add	r4, r5
 80004c6:	e747      	b.n	8000358 <__udivmoddi4+0x14c>
 80004c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004cc:	442b      	add	r3, r5
 80004ce:	e72f      	b.n	8000330 <__udivmoddi4+0x124>
 80004d0:	4638      	mov	r0, r7
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xda>
 80004d4:	4637      	mov	r7, r6
 80004d6:	e6e9      	b.n	80002ac <__udivmoddi4+0xa0>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004e2:	4b10      	ldr	r3, [pc, #64]	; (8000524 <MX_DMA_Init+0x48>)
 80004e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004e6:	4a0f      	ldr	r2, [pc, #60]	; (8000524 <MX_DMA_Init+0x48>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6493      	str	r3, [r2, #72]	; 0x48
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <MX_DMA_Init+0x48>)
 80004f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2100      	movs	r1, #0
 80004fe:	200d      	movs	r0, #13
 8000500:	f000 fce9 	bl	8000ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000504:	200d      	movs	r0, #13
 8000506:	f000 fd02 	bl	8000f0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800050a:	2200      	movs	r2, #0
 800050c:	2100      	movs	r1, #0
 800050e:	2010      	movs	r0, #16
 8000510:	f000 fce1 	bl	8000ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000514:	2010      	movs	r0, #16
 8000516:	f000 fcfa 	bl	8000f0e <HAL_NVIC_EnableIRQ>

}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000

08000528 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08a      	sub	sp, #40	; 0x28
 800052c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053e:	4b3c      	ldr	r3, [pc, #240]	; (8000630 <MX_GPIO_Init+0x108>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	4a3b      	ldr	r2, [pc, #236]	; (8000630 <MX_GPIO_Init+0x108>)
 8000544:	f043 0304 	orr.w	r3, r3, #4
 8000548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054a:	4b39      	ldr	r3, [pc, #228]	; (8000630 <MX_GPIO_Init+0x108>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	f003 0304 	and.w	r3, r3, #4
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000556:	4b36      	ldr	r3, [pc, #216]	; (8000630 <MX_GPIO_Init+0x108>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	4a35      	ldr	r2, [pc, #212]	; (8000630 <MX_GPIO_Init+0x108>)
 800055c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000562:	4b33      	ldr	r3, [pc, #204]	; (8000630 <MX_GPIO_Init+0x108>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	4b30      	ldr	r3, [pc, #192]	; (8000630 <MX_GPIO_Init+0x108>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	4a2f      	ldr	r2, [pc, #188]	; (8000630 <MX_GPIO_Init+0x108>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057a:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <MX_GPIO_Init+0x108>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <MX_GPIO_Init+0x108>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	4a29      	ldr	r2, [pc, #164]	; (8000630 <MX_GPIO_Init+0x108>)
 800058c:	f043 0302 	orr.w	r3, r3, #2
 8000590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000592:	4b27      	ldr	r3, [pc, #156]	; (8000630 <MX_GPIO_Init+0x108>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	f003 0302 	and.w	r3, r3, #2
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	21b0      	movs	r1, #176	; 0xb0
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a6:	f001 f83f 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b0:	4820      	ldr	r0, [pc, #128]	; (8000634 <MX_GPIO_Init+0x10c>)
 80005b2:	f001 f839 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005bc:	4b1e      	ldr	r3, [pc, #120]	; (8000638 <MX_GPIO_Init+0x110>)
 80005be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	4619      	mov	r1, r3
 80005ca:	481c      	ldr	r0, [pc, #112]	; (800063c <MX_GPIO_Init+0x114>)
 80005cc:	f000 feb2 	bl	8001334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 80005d0:	23b0      	movs	r3, #176	; 0xb0
 80005d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d4:	2301      	movs	r3, #1
 80005d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005dc:	2300      	movs	r3, #0
 80005de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	4619      	mov	r1, r3
 80005e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ea:	f000 fea3 	bl	8001334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80005ee:	2340      	movs	r3, #64	; 0x40
 80005f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005f6:	2301      	movs	r3, #1
 80005f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000604:	f000 fe96 	bl	8001334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800060c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	2301      	movs	r3, #1
 8000610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	2300      	movs	r3, #0
 8000618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <MX_GPIO_Init+0x10c>)
 8000622:	f000 fe87 	bl	8001334 <HAL_GPIO_Init>

}
 8000626:	bf00      	nop
 8000628:	3728      	adds	r7, #40	; 0x28
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000
 8000634:	48000400 	.word	0x48000400
 8000638:	10210000 	.word	0x10210000
 800063c:	48000800 	.word	0x48000800

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b091      	sub	sp, #68	; 0x44
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 faf3 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f837 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f7ff ff6b 	bl	8000528 <MX_GPIO_Init>
  MX_DMA_Init();
 8000652:	f7ff ff43 	bl	80004dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000656:	f000 f973 	bl	8000940 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800065a:	f000 f9a1 	bl	80009a0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	char tx2Data[30] = "Hello world\n\r";
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <main+0x68>)
 8000660:	f107 0420 	add.w	r4, r7, #32
 8000664:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000666:	c407      	stmia	r4!, {r0, r1, r2}
 8000668:	8023      	strh	r3, [r4, #0]
 800066a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
	char tx3Data[30];

	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx2Data, 1);
 8000678:	2201      	movs	r2, #1
 800067a:	490c      	ldr	r1, [pc, #48]	; (80006ac <main+0x6c>)
 800067c:	480c      	ldr	r0, [pc, #48]	; (80006b0 <main+0x70>)
 800067e:	f002 faa3 	bl	8002bc8 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart3, (uint8_t*)rx3Data, 1);
 8000682:	2201      	movs	r2, #1
 8000684:	490b      	ldr	r1, [pc, #44]	; (80006b4 <main+0x74>)
 8000686:	480c      	ldr	r0, [pc, #48]	; (80006b8 <main+0x78>)
 8000688:	f002 fa9e 	bl	8002bc8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(&huart2, (uint8_t*)tx2Data, strlen(tx2Data), 10);
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff fd9b 	bl	80001cc <strlen>
 8000696:	4603      	mov	r3, r0
 8000698:	b29a      	uxth	r2, r3
 800069a:	f107 0120 	add.w	r1, r7, #32
 800069e:	230a      	movs	r3, #10
 80006a0:	4803      	ldr	r0, [pc, #12]	; (80006b0 <main+0x70>)
 80006a2:	f002 f9fd 	bl	8002aa0 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80006a6:	e7fe      	b.n	80006a6 <main+0x66>
 80006a8:	080037bc 	.word	0x080037bc
 80006ac:	20000028 	.word	0x20000028
 80006b0:	20000178 	.word	0x20000178
 80006b4:	20000048 	.word	0x20000048
 80006b8:	200000f8 	.word	0x200000f8

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b0ae      	sub	sp, #184	; 0xb8
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80006c6:	2244      	movs	r2, #68	; 0x44
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 f862 	bl	8003794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e0:	463b      	mov	r3, r7
 80006e2:	2260      	movs	r2, #96	; 0x60
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 f854 	bl	8003794 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	2310      	movs	r3, #16
 80006fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2302      	movs	r3, #2
 8000706:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 800070a:	2301      	movs	r3, #1
 800070c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000710:	230a      	movs	r3, #10
 8000712:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000716:	2307      	movs	r3, #7
 8000718:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000722:	2302      	movs	r3, #2
 8000724:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800072c:	4618      	mov	r0, r3
 800072e:	f001 f811 	bl	8001754 <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000738:	f000 f85e 	bl	80007f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2303      	movs	r3, #3
 8000742:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000750:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000754:	2104      	movs	r1, #4
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fc1c 	bl	8001f94 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000762:	f000 f849 	bl	80007f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 8000766:	2306      	movs	r3, #6
 8000768:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800076a:	2300      	movs	r3, #0
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800076e:	2300      	movs	r3, #0
 8000770:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	4618      	mov	r0, r3
 8000776:	f001 fe11 	bl	800239c <HAL_RCCEx_PeriphCLKConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000780:	f000 f83a 	bl	80007f8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000784:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000788:	f000 ff8e 	bl	80016a8 <HAL_PWREx_ControlVoltageScaling>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000792:	f000 f831 	bl	80007f8 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	37b8      	adds	r7, #184	; 0xb8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(huart);
	/* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
	 */
	HAL_UART_Transmit(&huart2, (uint8_t*)rx3Data, strlen(rx3Data), 10);
 80007a8:	480e      	ldr	r0, [pc, #56]	; (80007e4 <HAL_UART_RxCpltCallback+0x44>)
 80007aa:	f7ff fd0f 	bl	80001cc <strlen>
 80007ae:	4603      	mov	r3, r0
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	230a      	movs	r3, #10
 80007b4:	490b      	ldr	r1, [pc, #44]	; (80007e4 <HAL_UART_RxCpltCallback+0x44>)
 80007b6:	480c      	ldr	r0, [pc, #48]	; (80007e8 <HAL_UART_RxCpltCallback+0x48>)
 80007b8:	f002 f972 	bl	8002aa0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*)rx2Data, strlen(rx2Data), 10);
 80007bc:	480b      	ldr	r0, [pc, #44]	; (80007ec <HAL_UART_RxCpltCallback+0x4c>)
 80007be:	f7ff fd05 	bl	80001cc <strlen>
 80007c2:	4603      	mov	r3, r0
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	230a      	movs	r3, #10
 80007c8:	4908      	ldr	r1, [pc, #32]	; (80007ec <HAL_UART_RxCpltCallback+0x4c>)
 80007ca:	4809      	ldr	r0, [pc, #36]	; (80007f0 <HAL_UART_RxCpltCallback+0x50>)
 80007cc:	f002 f968 	bl	8002aa0 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80007d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d4:	4807      	ldr	r0, [pc, #28]	; (80007f4 <HAL_UART_RxCpltCallback+0x54>)
 80007d6:	f000 ff3f 	bl	8001658 <HAL_GPIO_TogglePin>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000048 	.word	0x20000048
 80007e8:	20000178 	.word	0x20000178
 80007ec:	20000028 	.word	0x20000028
 80007f0:	200000f8 	.word	0x200000f8
 80007f4:	48000400 	.word	0x48000400

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <HAL_MspInit+0x44>)
 8000810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000812:	4a0e      	ldr	r2, [pc, #56]	; (800084c <HAL_MspInit+0x44>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6613      	str	r3, [r2, #96]	; 0x60
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <HAL_MspInit+0x44>)
 800081c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <HAL_MspInit+0x44>)
 8000828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800082a:	4a08      	ldr	r2, [pc, #32]	; (800084c <HAL_MspInit+0x44>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6593      	str	r3, [r2, #88]	; 0x58
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_MspInit+0x44>)
 8000834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <MemManage_Handler+0x4>

0800086a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <UsageFault_Handler+0x4>

08000876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a4:	f000 fa1e 	bl	8000ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}

080008ac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80008b0:	4802      	ldr	r0, [pc, #8]	; (80008bc <DMA1_Channel3_IRQHandler+0x10>)
 80008b2:	f000 fc5f 	bl	8001174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200000b0 	.word	0x200000b0

080008c0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <DMA1_Channel6_IRQHandler+0x10>)
 80008c6:	f000 fc55 	bl	8001174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000068 	.word	0x20000068

080008d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <SystemInit+0x64>)
 80008da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008de:	4a16      	ldr	r2, [pc, #88]	; (8000938 <SystemInit+0x64>)
 80008e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <SystemInit+0x68>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a13      	ldr	r2, [pc, #76]	; (800093c <SystemInit+0x68>)
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <SystemInit+0x68>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <SystemInit+0x68>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a0f      	ldr	r2, [pc, #60]	; (800093c <SystemInit+0x68>)
 8000900:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000904:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000908:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <SystemInit+0x68>)
 800090c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000910:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <SystemInit+0x68>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a09      	ldr	r2, [pc, #36]	; (800093c <SystemInit+0x68>)
 8000918:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800091c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800091e:	4b07      	ldr	r3, [pc, #28]	; (800093c <SystemInit+0x68>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <SystemInit+0x64>)
 8000926:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800092a:	609a      	str	r2, [r3, #8]
#endif
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00
 800093c:	40021000 	.word	0x40021000

08000940 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000946:	4a15      	ldr	r2, [pc, #84]	; (800099c <MX_USART2_UART_Init+0x5c>)
 8000948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_USART2_UART_Init+0x58>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_USART2_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_USART2_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_USART2_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000984:	f002 f83e 	bl	8002a04 <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800098e:	f7ff ff33 	bl	80007f8 <Error_Handler>
  }

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000178 	.word	0x20000178
 800099c:	40004400 	.word	0x40004400

080009a0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_USART3_UART_Init+0x58>)
 80009a6:	4a15      	ldr	r2, [pc, #84]	; (80009fc <MX_USART3_UART_Init+0x5c>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_USART3_UART_Init+0x58>)
 80009ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_USART3_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_USART3_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_USART3_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_USART3_UART_Init+0x58>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_USART3_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_USART3_UART_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_USART3_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_USART3_UART_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_USART3_UART_Init+0x58>)
 80009e4:	f002 f80e 	bl	8002a04 <HAL_UART_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009ee:	f7ff ff03 	bl	80007f8 <Error_Handler>
  }

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200000f8 	.word	0x200000f8
 80009fc:	40004800 	.word	0x40004800

08000a00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08c      	sub	sp, #48	; 0x30
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a66      	ldr	r2, [pc, #408]	; (8000bb8 <HAL_UART_MspInit+0x1b8>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d152      	bne.n	8000ac8 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a22:	4b66      	ldr	r3, [pc, #408]	; (8000bbc <HAL_UART_MspInit+0x1bc>)
 8000a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a26:	4a65      	ldr	r2, [pc, #404]	; (8000bbc <HAL_UART_MspInit+0x1bc>)
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2e:	4b63      	ldr	r3, [pc, #396]	; (8000bbc <HAL_UART_MspInit+0x1bc>)
 8000a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a36:	61bb      	str	r3, [r7, #24]
 8000a38:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b60      	ldr	r3, [pc, #384]	; (8000bbc <HAL_UART_MspInit+0x1bc>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a5f      	ldr	r2, [pc, #380]	; (8000bbc <HAL_UART_MspInit+0x1bc>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b5d      	ldr	r3, [pc, #372]	; (8000bbc <HAL_UART_MspInit+0x1bc>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a52:	230c      	movs	r3, #12
 8000a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a62:	2307      	movs	r3, #7
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a70:	f000 fc60 	bl	8001334 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000a74:	4b52      	ldr	r3, [pc, #328]	; (8000bc0 <HAL_UART_MspInit+0x1c0>)
 8000a76:	4a53      	ldr	r2, [pc, #332]	; (8000bc4 <HAL_UART_MspInit+0x1c4>)
 8000a78:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000a7a:	4b51      	ldr	r3, [pc, #324]	; (8000bc0 <HAL_UART_MspInit+0x1c0>)
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a80:	4b4f      	ldr	r3, [pc, #316]	; (8000bc0 <HAL_UART_MspInit+0x1c0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a86:	4b4e      	ldr	r3, [pc, #312]	; (8000bc0 <HAL_UART_MspInit+0x1c0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a8c:	4b4c      	ldr	r3, [pc, #304]	; (8000bc0 <HAL_UART_MspInit+0x1c0>)
 8000a8e:	2280      	movs	r2, #128	; 0x80
 8000a90:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a92:	4b4b      	ldr	r3, [pc, #300]	; (8000bc0 <HAL_UART_MspInit+0x1c0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a98:	4b49      	ldr	r3, [pc, #292]	; (8000bc0 <HAL_UART_MspInit+0x1c0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000a9e:	4b48      	ldr	r3, [pc, #288]	; (8000bc0 <HAL_UART_MspInit+0x1c0>)
 8000aa0:	2220      	movs	r2, #32
 8000aa2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000aa4:	4b46      	ldr	r3, [pc, #280]	; (8000bc0 <HAL_UART_MspInit+0x1c0>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000aaa:	4845      	ldr	r0, [pc, #276]	; (8000bc0 <HAL_UART_MspInit+0x1c0>)
 8000aac:	f000 fa4a 	bl	8000f44 <HAL_DMA_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8000ab6:	f7ff fe9f 	bl	80007f8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a40      	ldr	r2, [pc, #256]	; (8000bc0 <HAL_UART_MspInit+0x1c0>)
 8000abe:	66da      	str	r2, [r3, #108]	; 0x6c
 8000ac0:	4a3f      	ldr	r2, [pc, #252]	; (8000bc0 <HAL_UART_MspInit+0x1c0>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ac6:	e072      	b.n	8000bae <HAL_UART_MspInit+0x1ae>
  else if(uartHandle->Instance==USART3)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a3e      	ldr	r2, [pc, #248]	; (8000bc8 <HAL_UART_MspInit+0x1c8>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d16d      	bne.n	8000bae <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ad2:	4b3a      	ldr	r3, [pc, #232]	; (8000bbc <HAL_UART_MspInit+0x1bc>)
 8000ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad6:	4a39      	ldr	r2, [pc, #228]	; (8000bbc <HAL_UART_MspInit+0x1bc>)
 8000ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000adc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ade:	4b37      	ldr	r3, [pc, #220]	; (8000bbc <HAL_UART_MspInit+0x1bc>)
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	4b34      	ldr	r3, [pc, #208]	; (8000bbc <HAL_UART_MspInit+0x1bc>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a33      	ldr	r2, [pc, #204]	; (8000bbc <HAL_UART_MspInit+0x1bc>)
 8000af0:	f043 0304 	orr.w	r3, r3, #4
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b31      	ldr	r3, [pc, #196]	; (8000bbc <HAL_UART_MspInit+0x1bc>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b2e      	ldr	r3, [pc, #184]	; (8000bbc <HAL_UART_MspInit+0x1bc>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a2d      	ldr	r2, [pc, #180]	; (8000bbc <HAL_UART_MspInit+0x1bc>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b2b      	ldr	r3, [pc, #172]	; (8000bbc <HAL_UART_MspInit+0x1bc>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b1a:	2310      	movs	r3, #16
 8000b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b2a:	2307      	movs	r3, #7
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	4825      	ldr	r0, [pc, #148]	; (8000bcc <HAL_UART_MspInit+0x1cc>)
 8000b36:	f000 fbfd 	bl	8001334 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b4c:	2307      	movs	r3, #7
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	481e      	ldr	r0, [pc, #120]	; (8000bd0 <HAL_UART_MspInit+0x1d0>)
 8000b58:	f000 fbec 	bl	8001334 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <HAL_UART_MspInit+0x1d4>)
 8000b5e:	4a1e      	ldr	r2, [pc, #120]	; (8000bd8 <HAL_UART_MspInit+0x1d8>)
 8000b60:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <HAL_UART_MspInit+0x1d4>)
 8000b64:	2202      	movs	r2, #2
 8000b66:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <HAL_UART_MspInit+0x1d4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b6e:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <HAL_UART_MspInit+0x1d4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <HAL_UART_MspInit+0x1d4>)
 8000b76:	2280      	movs	r2, #128	; 0x80
 8000b78:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <HAL_UART_MspInit+0x1d4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <HAL_UART_MspInit+0x1d4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <HAL_UART_MspInit+0x1d4>)
 8000b88:	2220      	movs	r2, #32
 8000b8a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <HAL_UART_MspInit+0x1d4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000b92:	4810      	ldr	r0, [pc, #64]	; (8000bd4 <HAL_UART_MspInit+0x1d4>)
 8000b94:	f000 f9d6 	bl	8000f44 <HAL_DMA_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 8000b9e:	f7ff fe2b 	bl	80007f8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <HAL_UART_MspInit+0x1d4>)
 8000ba6:	66da      	str	r2, [r3, #108]	; 0x6c
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <HAL_UART_MspInit+0x1d4>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000bae:	bf00      	nop
 8000bb0:	3730      	adds	r7, #48	; 0x30
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40004400 	.word	0x40004400
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	20000068 	.word	0x20000068
 8000bc4:	4002006c 	.word	0x4002006c
 8000bc8:	40004800 	.word	0x40004800
 8000bcc:	48000800 	.word	0x48000800
 8000bd0:	48000400 	.word	0x48000400
 8000bd4:	200000b0 	.word	0x200000b0
 8000bd8:	40020030 	.word	0x40020030

08000bdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c14 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000be0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000be2:	e003      	b.n	8000bec <LoopCopyDataInit>

08000be4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000be6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000be8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bea:	3104      	adds	r1, #4

08000bec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000bec:	480b      	ldr	r0, [pc, #44]	; (8000c1c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000bf0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bf2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bf4:	d3f6      	bcc.n	8000be4 <CopyDataInit>
	ldr	r2, =_sbss
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000bf8:	e002      	b.n	8000c00 <LoopFillZerobss>

08000bfa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bfa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000bfc:	f842 3b04 	str.w	r3, [r2], #4

08000c00 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <LoopForever+0x16>)
	cmp	r2, r3
 8000c02:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c04:	d3f9      	bcc.n	8000bfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c06:	f7ff fe65 	bl	80008d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f002 fd9f 	bl	800374c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c0e:	f7ff fd17 	bl	8000640 <main>

08000c12 <LoopForever>:

LoopForever:
    b LoopForever
 8000c12:	e7fe      	b.n	8000c12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c14:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000c18:	08003834 	.word	0x08003834
	ldr	r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c20:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000c24:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000c28:	200001fc 	.word	0x200001fc

08000c2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC1_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c36:	2300      	movs	r3, #0
 8000c38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <HAL_Init+0x3c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <HAL_Init+0x3c>)
 8000c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c46:	2003      	movs	r0, #3
 8000c48:	f000 f93a 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f000 f80f 	bl	8000c70 <HAL_InitTick>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d002      	beq.n	8000c5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	71fb      	strb	r3, [r7, #7]
 8000c5c:	e001      	b.n	8000c62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c5e:	f7ff fdd3 	bl	8000808 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c62:	79fb      	ldrb	r3, [r7, #7]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40022000 	.word	0x40022000

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <HAL_InitTick+0x68>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d022      	beq.n	8000cca <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c84:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_InitTick+0x6c>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <HAL_InitTick+0x68>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c90:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 f946 	bl	8000f2a <HAL_SYSTICK_Config>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d10f      	bne.n	8000cc4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b0f      	cmp	r3, #15
 8000ca8:	d809      	bhi.n	8000cbe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000caa:	2200      	movs	r2, #0
 8000cac:	6879      	ldr	r1, [r7, #4]
 8000cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cb2:	f000 f910 	bl	8000ed6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_InitTick+0x70>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6013      	str	r3, [r2, #0]
 8000cbc:	e007      	b.n	8000cce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	73fb      	strb	r3, [r7, #15]
 8000cc2:	e004      	b.n	8000cce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	73fb      	strb	r3, [r7, #15]
 8000cc8:	e001      	b.n	8000cce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	20000004 	.word	0x20000004

08000ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <HAL_IncTick+0x1c>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <HAL_IncTick+0x20>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	4a03      	ldr	r2, [pc, #12]	; (8000d00 <HAL_IncTick+0x1c>)
 8000cf4:	6013      	str	r3, [r2, #0]
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	200001f8 	.word	0x200001f8
 8000d04:	20000008 	.word	0x20000008

08000d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <HAL_GetTick+0x14>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	200001f8 	.word	0x200001f8

08000d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d52:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4907      	ldr	r1, [pc, #28]	; (8000dbc <__NVIC_EnableIRQ+0x38>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	; (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e8c:	d301      	bcc.n	8000e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00f      	b.n	8000eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <SysTick_Config+0x40>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ea0:	f7ff ff8e 	bl	8000dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <SysTick_Config+0x40>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <SysTick_Config+0x40>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff29 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee8:	f7ff ff3e 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000eec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	6978      	ldr	r0, [r7, #20]
 8000ef4:	f7ff ff8e 	bl	8000e14 <NVIC_EncodePriority>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff5d 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff31 	bl	8000d84 <__NVIC_EnableIRQ>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ffa2 	bl	8000e7c <SysTick_Config>
 8000f38:	4603      	mov	r3, r0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e098      	b.n	8001088 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b4d      	ldr	r3, [pc, #308]	; (8001094 <HAL_DMA_Init+0x150>)
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d80f      	bhi.n	8000f82 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b4b      	ldr	r3, [pc, #300]	; (8001098 <HAL_DMA_Init+0x154>)
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4a4b      	ldr	r2, [pc, #300]	; (800109c <HAL_DMA_Init+0x158>)
 8000f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f72:	091b      	lsrs	r3, r3, #4
 8000f74:	009a      	lsls	r2, r3, #2
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a48      	ldr	r2, [pc, #288]	; (80010a0 <HAL_DMA_Init+0x15c>)
 8000f7e:	641a      	str	r2, [r3, #64]	; 0x40
 8000f80:	e00e      	b.n	8000fa0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b46      	ldr	r3, [pc, #280]	; (80010a4 <HAL_DMA_Init+0x160>)
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a43      	ldr	r2, [pc, #268]	; (800109c <HAL_DMA_Init+0x158>)
 8000f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f92:	091b      	lsrs	r3, r3, #4
 8000f94:	009a      	lsls	r2, r3, #2
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a42      	ldr	r2, [pc, #264]	; (80010a8 <HAL_DMA_Init+0x164>)
 8000f9e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ffa:	d039      	beq.n	8001070 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	4a27      	ldr	r2, [pc, #156]	; (80010a0 <HAL_DMA_Init+0x15c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d11a      	bne.n	800103c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001006:	4b29      	ldr	r3, [pc, #164]	; (80010ac <HAL_DMA_Init+0x168>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f003 031c 	and.w	r3, r3, #28
 8001012:	210f      	movs	r1, #15
 8001014:	fa01 f303 	lsl.w	r3, r1, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	4924      	ldr	r1, [pc, #144]	; (80010ac <HAL_DMA_Init+0x168>)
 800101c:	4013      	ands	r3, r2
 800101e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001020:	4b22      	ldr	r3, [pc, #136]	; (80010ac <HAL_DMA_Init+0x168>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6859      	ldr	r1, [r3, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102c:	f003 031c 	and.w	r3, r3, #28
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	491d      	ldr	r1, [pc, #116]	; (80010ac <HAL_DMA_Init+0x168>)
 8001036:	4313      	orrs	r3, r2
 8001038:	600b      	str	r3, [r1, #0]
 800103a:	e019      	b.n	8001070 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800103c:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <HAL_DMA_Init+0x16c>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001044:	f003 031c 	and.w	r3, r3, #28
 8001048:	210f      	movs	r1, #15
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	4917      	ldr	r1, [pc, #92]	; (80010b0 <HAL_DMA_Init+0x16c>)
 8001052:	4013      	ands	r3, r2
 8001054:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <HAL_DMA_Init+0x16c>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6859      	ldr	r1, [r3, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f003 031c 	and.w	r3, r3, #28
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	4911      	ldr	r1, [pc, #68]	; (80010b0 <HAL_DMA_Init+0x16c>)
 800106c:	4313      	orrs	r3, r2
 800106e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	40020407 	.word	0x40020407
 8001098:	bffdfff8 	.word	0xbffdfff8
 800109c:	cccccccd 	.word	0xcccccccd
 80010a0:	40020000 	.word	0x40020000
 80010a4:	bffdfbf8 	.word	0xbffdfbf8
 80010a8:	40020400 	.word	0x40020400
 80010ac:	400200a8 	.word	0x400200a8
 80010b0:	400204a8 	.word	0x400204a8

080010b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
 80010c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d101      	bne.n	80010d4 <HAL_DMA_Start_IT+0x20>
 80010d0:	2302      	movs	r3, #2
 80010d2:	e04b      	b.n	800116c <HAL_DMA_Start_IT+0xb8>
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2201      	movs	r2, #1
 80010d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d13a      	bne.n	800115e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2202      	movs	r2, #2
 80010ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2200      	movs	r2, #0
 80010f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 0201 	bic.w	r2, r2, #1
 8001104:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	68b9      	ldr	r1, [r7, #8]
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f000 f8e0 	bl	80012d2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	2b00      	cmp	r3, #0
 8001118:	d008      	beq.n	800112c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f042 020e 	orr.w	r2, r2, #14
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	e00f      	b.n	800114c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 0204 	bic.w	r2, r2, #4
 800113a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 020a 	orr.w	r2, r2, #10
 800114a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0201 	orr.w	r2, r2, #1
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	e005      	b.n	800116a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001166:	2302      	movs	r3, #2
 8001168:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800116a:	7dfb      	ldrb	r3, [r7, #23]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001190:	f003 031c 	and.w	r3, r3, #28
 8001194:	2204      	movs	r2, #4
 8001196:	409a      	lsls	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4013      	ands	r3, r2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d026      	beq.n	80011ee <HAL_DMA_IRQHandler+0x7a>
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d021      	beq.n	80011ee <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0320 	and.w	r3, r3, #32
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d107      	bne.n	80011c8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 0204 	bic.w	r2, r2, #4
 80011c6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011cc:	f003 021c 	and.w	r2, r3, #28
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	2104      	movs	r1, #4
 80011d6:	fa01 f202 	lsl.w	r2, r1, r2
 80011da:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d071      	beq.n	80012c8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80011ec:	e06c      	b.n	80012c8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f003 031c 	and.w	r3, r3, #28
 80011f6:	2202      	movs	r2, #2
 80011f8:	409a      	lsls	r2, r3
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4013      	ands	r3, r2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d02e      	beq.n	8001260 <HAL_DMA_IRQHandler+0xec>
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d029      	beq.n	8001260 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0320 	and.w	r3, r3, #32
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10b      	bne.n	8001232 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 020a 	bic.w	r2, r2, #10
 8001228:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f003 021c 	and.w	r2, r3, #28
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	2102      	movs	r1, #2
 8001240:	fa01 f202 	lsl.w	r2, r1, r2
 8001244:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001252:	2b00      	cmp	r3, #0
 8001254:	d038      	beq.n	80012c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800125e:	e033      	b.n	80012c8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001264:	f003 031c 	and.w	r3, r3, #28
 8001268:	2208      	movs	r2, #8
 800126a:	409a      	lsls	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4013      	ands	r3, r2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d02a      	beq.n	80012ca <HAL_DMA_IRQHandler+0x156>
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d025      	beq.n	80012ca <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 020e 	bic.w	r2, r2, #14
 800128c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f003 021c 	and.w	r2, r3, #28
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	2101      	movs	r1, #1
 800129c:	fa01 f202 	lsl.w	r2, r1, r2
 80012a0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2201      	movs	r2, #1
 80012a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d004      	beq.n	80012ca <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
}
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b085      	sub	sp, #20
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	60f8      	str	r0, [r7, #12]
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e4:	f003 021c 	and.w	r2, r3, #28
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	2101      	movs	r1, #1
 80012ee:	fa01 f202 	lsl.w	r2, r1, r2
 80012f2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2b10      	cmp	r3, #16
 8001302:	d108      	bne.n	8001316 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68ba      	ldr	r2, [r7, #8]
 8001312:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001314:	e007      	b.n	8001326 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	60da      	str	r2, [r3, #12]
}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001334:	b480      	push	{r7}
 8001336:	b087      	sub	sp, #28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001342:	e154      	b.n	80015ee <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	2101      	movs	r1, #1
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	fa01 f303 	lsl.w	r3, r1, r3
 8001350:	4013      	ands	r3, r2
 8001352:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 8146 	beq.w	80015e8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d00b      	beq.n	800137c <HAL_GPIO_Init+0x48>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d007      	beq.n	800137c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001370:	2b11      	cmp	r3, #17
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b12      	cmp	r3, #18
 800137a:	d130      	bne.n	80013de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013b2:	2201      	movs	r2, #1
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	091b      	lsrs	r3, r3, #4
 80013c8:	f003 0201 	and.w	r2, r3, #1
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	2203      	movs	r2, #3
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0xea>
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b12      	cmp	r3, #18
 800141c:	d123      	bne.n	8001466 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	08da      	lsrs	r2, r3, #3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3208      	adds	r2, #8
 8001426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800142a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	220f      	movs	r2, #15
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	691a      	ldr	r2, [r3, #16]
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	08da      	lsrs	r2, r3, #3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3208      	adds	r2, #8
 8001460:	6939      	ldr	r1, [r7, #16]
 8001462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	2203      	movs	r2, #3
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 0203 	and.w	r2, r3, #3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 80a0 	beq.w	80015e8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a8:	4b58      	ldr	r3, [pc, #352]	; (800160c <HAL_GPIO_Init+0x2d8>)
 80014aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ac:	4a57      	ldr	r2, [pc, #348]	; (800160c <HAL_GPIO_Init+0x2d8>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6613      	str	r3, [r2, #96]	; 0x60
 80014b4:	4b55      	ldr	r3, [pc, #340]	; (800160c <HAL_GPIO_Init+0x2d8>)
 80014b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014c0:	4a53      	ldr	r2, [pc, #332]	; (8001610 <HAL_GPIO_Init+0x2dc>)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3302      	adds	r3, #2
 80014c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	220f      	movs	r2, #15
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014ea:	d019      	beq.n	8001520 <HAL_GPIO_Init+0x1ec>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a49      	ldr	r2, [pc, #292]	; (8001614 <HAL_GPIO_Init+0x2e0>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d013      	beq.n	800151c <HAL_GPIO_Init+0x1e8>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a48      	ldr	r2, [pc, #288]	; (8001618 <HAL_GPIO_Init+0x2e4>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d00d      	beq.n	8001518 <HAL_GPIO_Init+0x1e4>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a47      	ldr	r2, [pc, #284]	; (800161c <HAL_GPIO_Init+0x2e8>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d007      	beq.n	8001514 <HAL_GPIO_Init+0x1e0>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a46      	ldr	r2, [pc, #280]	; (8001620 <HAL_GPIO_Init+0x2ec>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d101      	bne.n	8001510 <HAL_GPIO_Init+0x1dc>
 800150c:	2304      	movs	r3, #4
 800150e:	e008      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 8001510:	2307      	movs	r3, #7
 8001512:	e006      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 8001514:	2303      	movs	r3, #3
 8001516:	e004      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 8001518:	2302      	movs	r3, #2
 800151a:	e002      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 8001520:	2300      	movs	r3, #0
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	f002 0203 	and.w	r2, r2, #3
 8001528:	0092      	lsls	r2, r2, #2
 800152a:	4093      	lsls	r3, r2
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001532:	4937      	ldr	r1, [pc, #220]	; (8001610 <HAL_GPIO_Init+0x2dc>)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	3302      	adds	r3, #2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001540:	4b38      	ldr	r3, [pc, #224]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	43db      	mvns	r3, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001564:	4a2f      	ldr	r2, [pc, #188]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800156a:	4b2e      	ldr	r3, [pc, #184]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	43db      	mvns	r3, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800158e:	4a25      	ldr	r2, [pc, #148]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001594:	4b23      	ldr	r3, [pc, #140]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	43db      	mvns	r3, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015b8:	4a1a      	ldr	r2, [pc, #104]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015e2:	4a10      	ldr	r2, [pc, #64]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	3301      	adds	r3, #1
 80015ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	fa22 f303 	lsr.w	r3, r2, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f47f aea3 	bne.w	8001344 <HAL_GPIO_Init+0x10>
  }
}
 80015fe:	bf00      	nop
 8001600:	371c      	adds	r7, #28
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000
 8001610:	40010000 	.word	0x40010000
 8001614:	48000400 	.word	0x48000400
 8001618:	48000800 	.word	0x48000800
 800161c:	48000c00 	.word	0x48000c00
 8001620:	48001000 	.word	0x48001000
 8001624:	40010400 	.word	0x40010400

08001628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
 8001634:	4613      	mov	r3, r2
 8001636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001638:	787b      	ldrb	r3, [r7, #1]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001644:	e002      	b.n	800164c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695a      	ldr	r2, [r3, #20]
 8001668:	887b      	ldrh	r3, [r7, #2]
 800166a:	4013      	ands	r3, r2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001670:	887a      	ldrh	r2, [r7, #2]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001676:	e002      	b.n	800167e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001678:	887a      	ldrh	r2, [r7, #2]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	619a      	str	r2, [r3, #24]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40007000 	.word	0x40007000

080016a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016b6:	d130      	bne.n	800171a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016b8:	4b23      	ldr	r3, [pc, #140]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016c4:	d038      	beq.n	8001738 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016ce:	4a1e      	ldr	r2, [pc, #120]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2232      	movs	r2, #50	; 0x32
 80016dc:	fb02 f303 	mul.w	r3, r2, r3
 80016e0:	4a1b      	ldr	r2, [pc, #108]	; (8001750 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	0c9b      	lsrs	r3, r3, #18
 80016e8:	3301      	adds	r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016ec:	e002      	b.n	80016f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001700:	d102      	bne.n	8001708 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f2      	bne.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001714:	d110      	bne.n	8001738 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e00f      	b.n	800173a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001726:	d007      	beq.n	8001738 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001730:	4a05      	ldr	r2, [pc, #20]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001732:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001736:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40007000 	.word	0x40007000
 800174c:	20000000 	.word	0x20000000
 8001750:	431bde83 	.word	0x431bde83

08001754 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	f000 bc11 	b.w	8001f8a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001768:	4ba0      	ldr	r3, [pc, #640]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 030c 	and.w	r3, r3, #12
 8001770:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001772:	4b9e      	ldr	r3, [pc, #632]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0310 	and.w	r3, r3, #16
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 80e4 	beq.w	8001952 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d007      	beq.n	80017a0 <HAL_RCC_OscConfig+0x4c>
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	2b0c      	cmp	r3, #12
 8001794:	f040 808b 	bne.w	80018ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2b01      	cmp	r3, #1
 800179c:	f040 8087 	bne.w	80018ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017a0:	4b92      	ldr	r3, [pc, #584]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_OscConfig+0x64>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e3e8      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1a      	ldr	r2, [r3, #32]
 80017bc:	4b8b      	ldr	r3, [pc, #556]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d004      	beq.n	80017d2 <HAL_RCC_OscConfig+0x7e>
 80017c8:	4b88      	ldr	r3, [pc, #544]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017d0:	e005      	b.n	80017de <HAL_RCC_OscConfig+0x8a>
 80017d2:	4b86      	ldr	r3, [pc, #536]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 80017d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017de:	4293      	cmp	r3, r2
 80017e0:	d223      	bcs.n	800182a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 fd78 	bl	80022dc <RCC_SetFlashLatencyFromMSIRange>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e3c9      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017f6:	4b7d      	ldr	r3, [pc, #500]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a7c      	ldr	r2, [pc, #496]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 80017fc:	f043 0308 	orr.w	r3, r3, #8
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	4b7a      	ldr	r3, [pc, #488]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	4977      	ldr	r1, [pc, #476]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 8001810:	4313      	orrs	r3, r2
 8001812:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001814:	4b75      	ldr	r3, [pc, #468]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	4972      	ldr	r1, [pc, #456]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 8001824:	4313      	orrs	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
 8001828:	e025      	b.n	8001876 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800182a:	4b70      	ldr	r3, [pc, #448]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a6f      	ldr	r2, [pc, #444]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 8001830:	f043 0308 	orr.w	r3, r3, #8
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	4b6d      	ldr	r3, [pc, #436]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	496a      	ldr	r1, [pc, #424]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 8001844:	4313      	orrs	r3, r2
 8001846:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001848:	4b68      	ldr	r3, [pc, #416]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	4965      	ldr	r1, [pc, #404]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	4618      	mov	r0, r3
 8001868:	f000 fd38 	bl	80022dc <RCC_SetFlashLatencyFromMSIRange>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e389      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001876:	f000 fc6f 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 800187a:	4601      	mov	r1, r0
 800187c:	4b5b      	ldr	r3, [pc, #364]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	4a5a      	ldr	r2, [pc, #360]	; (80019f0 <HAL_RCC_OscConfig+0x29c>)
 8001888:	5cd3      	ldrb	r3, [r2, r3]
 800188a:	f003 031f 	and.w	r3, r3, #31
 800188e:	fa21 f303 	lsr.w	r3, r1, r3
 8001892:	4a58      	ldr	r2, [pc, #352]	; (80019f4 <HAL_RCC_OscConfig+0x2a0>)
 8001894:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001896:	4b58      	ldr	r3, [pc, #352]	; (80019f8 <HAL_RCC_OscConfig+0x2a4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff f9e8 	bl	8000c70 <HAL_InitTick>
 80018a0:	4603      	mov	r3, r0
 80018a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d052      	beq.n	8001950 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	e36d      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d032      	beq.n	800191c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018b6:	4b4d      	ldr	r3, [pc, #308]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a4c      	ldr	r2, [pc, #304]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018c2:	f7ff fa21 	bl	8000d08 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018ca:	f7ff fa1d 	bl	8000d08 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e356      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018dc:	4b43      	ldr	r3, [pc, #268]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018e8:	4b40      	ldr	r3, [pc, #256]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a3f      	ldr	r2, [pc, #252]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 80018ee:	f043 0308 	orr.w	r3, r3, #8
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b3d      	ldr	r3, [pc, #244]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	493a      	ldr	r1, [pc, #232]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 8001902:	4313      	orrs	r3, r2
 8001904:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001906:	4b39      	ldr	r3, [pc, #228]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	021b      	lsls	r3, r3, #8
 8001914:	4935      	ldr	r1, [pc, #212]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 8001916:	4313      	orrs	r3, r2
 8001918:	604b      	str	r3, [r1, #4]
 800191a:	e01a      	b.n	8001952 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800191c:	4b33      	ldr	r3, [pc, #204]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a32      	ldr	r2, [pc, #200]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 8001922:	f023 0301 	bic.w	r3, r3, #1
 8001926:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001928:	f7ff f9ee 	bl	8000d08 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001930:	f7ff f9ea 	bl	8000d08 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e323      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001942:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x1dc>
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001950:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d073      	beq.n	8001a46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	2b08      	cmp	r3, #8
 8001962:	d005      	beq.n	8001970 <HAL_RCC_OscConfig+0x21c>
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2b0c      	cmp	r3, #12
 8001968:	d10e      	bne.n	8001988 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	2b03      	cmp	r3, #3
 800196e:	d10b      	bne.n	8001988 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001970:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d063      	beq.n	8001a44 <HAL_RCC_OscConfig+0x2f0>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d15f      	bne.n	8001a44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e300      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001990:	d106      	bne.n	80019a0 <HAL_RCC_OscConfig+0x24c>
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a15      	ldr	r2, [pc, #84]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 8001998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e01d      	b.n	80019dc <HAL_RCC_OscConfig+0x288>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a8:	d10c      	bne.n	80019c4 <HAL_RCC_OscConfig+0x270>
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a0f      	ldr	r2, [pc, #60]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 80019b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 80019bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	e00b      	b.n	80019dc <HAL_RCC_OscConfig+0x288>
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a08      	ldr	r2, [pc, #32]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 80019ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a05      	ldr	r2, [pc, #20]	; (80019ec <HAL_RCC_OscConfig+0x298>)
 80019d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d01b      	beq.n	8001a1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff f990 	bl	8000d08 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ea:	e010      	b.n	8001a0e <HAL_RCC_OscConfig+0x2ba>
 80019ec:	40021000 	.word	0x40021000
 80019f0:	080037dc 	.word	0x080037dc
 80019f4:	20000000 	.word	0x20000000
 80019f8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019fc:	f7ff f984 	bl	8000d08 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	; 0x64
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e2bd      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0e:	4baf      	ldr	r3, [pc, #700]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f0      	beq.n	80019fc <HAL_RCC_OscConfig+0x2a8>
 8001a1a:	e014      	b.n	8001a46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff f974 	bl	8000d08 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a24:	f7ff f970 	bl	8000d08 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b64      	cmp	r3, #100	; 0x64
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e2a9      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a36:	4ba5      	ldr	r3, [pc, #660]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x2d0>
 8001a42:	e000      	b.n	8001a46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d060      	beq.n	8001b14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d005      	beq.n	8001a64 <HAL_RCC_OscConfig+0x310>
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2b0c      	cmp	r3, #12
 8001a5c:	d119      	bne.n	8001a92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d116      	bne.n	8001a92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a64:	4b99      	ldr	r3, [pc, #612]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_RCC_OscConfig+0x328>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e286      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7c:	4b93      	ldr	r3, [pc, #588]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	061b      	lsls	r3, r3, #24
 8001a8a:	4990      	ldr	r1, [pc, #576]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a90:	e040      	b.n	8001b14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d023      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a9a:	4b8c      	ldr	r3, [pc, #560]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a8b      	ldr	r2, [pc, #556]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa6:	f7ff f92f 	bl	8000d08 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aae:	f7ff f92b 	bl	8000d08 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e264      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac0:	4b82      	ldr	r3, [pc, #520]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001acc:	4b7f      	ldr	r3, [pc, #508]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	061b      	lsls	r3, r3, #24
 8001ada:	497c      	ldr	r1, [pc, #496]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
 8001ae0:	e018      	b.n	8001b14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae2:	4b7a      	ldr	r3, [pc, #488]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a79      	ldr	r2, [pc, #484]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aee:	f7ff f90b 	bl	8000d08 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af6:	f7ff f907 	bl	8000d08 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e240      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b08:	4b70      	ldr	r3, [pc, #448]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f0      	bne.n	8001af6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d03c      	beq.n	8001b9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d01c      	beq.n	8001b62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b28:	4b68      	ldr	r3, [pc, #416]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2e:	4a67      	ldr	r2, [pc, #412]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b38:	f7ff f8e6 	bl	8000d08 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b40:	f7ff f8e2 	bl	8000d08 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e21b      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b52:	4b5e      	ldr	r3, [pc, #376]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0ef      	beq.n	8001b40 <HAL_RCC_OscConfig+0x3ec>
 8001b60:	e01b      	b.n	8001b9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b62:	4b5a      	ldr	r3, [pc, #360]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	4a58      	ldr	r2, [pc, #352]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff f8c9 	bl	8000d08 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff f8c5 	bl	8000d08 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1fe      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b8c:	4b4f      	ldr	r3, [pc, #316]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1ef      	bne.n	8001b7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 80a6 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bac:	4b47      	ldr	r3, [pc, #284]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10d      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb8:	4b44      	ldr	r3, [pc, #272]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbc:	4a43      	ldr	r2, [pc, #268]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	6593      	str	r3, [r2, #88]	; 0x58
 8001bc4:	4b41      	ldr	r3, [pc, #260]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd4:	4b3e      	ldr	r3, [pc, #248]	; (8001cd0 <HAL_RCC_OscConfig+0x57c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d118      	bne.n	8001c12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001be0:	4b3b      	ldr	r3, [pc, #236]	; (8001cd0 <HAL_RCC_OscConfig+0x57c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a3a      	ldr	r2, [pc, #232]	; (8001cd0 <HAL_RCC_OscConfig+0x57c>)
 8001be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bec:	f7ff f88c 	bl	8000d08 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf4:	f7ff f888 	bl	8000d08 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e1c1      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c06:	4b32      	ldr	r3, [pc, #200]	; (8001cd0 <HAL_RCC_OscConfig+0x57c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d108      	bne.n	8001c2c <HAL_RCC_OscConfig+0x4d8>
 8001c1a:	4b2c      	ldr	r3, [pc, #176]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c20:	4a2a      	ldr	r2, [pc, #168]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c2a:	e024      	b.n	8001c76 <HAL_RCC_OscConfig+0x522>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b05      	cmp	r3, #5
 8001c32:	d110      	bne.n	8001c56 <HAL_RCC_OscConfig+0x502>
 8001c34:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3a:	4a24      	ldr	r2, [pc, #144]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c44:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4a:	4a20      	ldr	r2, [pc, #128]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c54:	e00f      	b.n	8001c76 <HAL_RCC_OscConfig+0x522>
 8001c56:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5c:	4a1b      	ldr	r2, [pc, #108]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001c5e:	f023 0301 	bic.w	r3, r3, #1
 8001c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c66:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6c:	4a17      	ldr	r2, [pc, #92]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001c6e:	f023 0304 	bic.w	r3, r3, #4
 8001c72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d016      	beq.n	8001cac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7e:	f7ff f843 	bl	8000d08 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c84:	e00a      	b.n	8001c9c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c86:	f7ff f83f 	bl	8000d08 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e176      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <HAL_RCC_OscConfig+0x578>)
 8001c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0ed      	beq.n	8001c86 <HAL_RCC_OscConfig+0x532>
 8001caa:	e01a      	b.n	8001ce2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cac:	f7ff f82c 	bl	8000d08 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb2:	e00f      	b.n	8001cd4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb4:	f7ff f828 	bl	8000d08 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d906      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e15f      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cd4:	4baa      	ldr	r3, [pc, #680]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1e8      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ce2:	7ffb      	ldrb	r3, [r7, #31]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d105      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce8:	4ba5      	ldr	r3, [pc, #660]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cec:	4aa4      	ldr	r2, [pc, #656]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0320 	and.w	r3, r3, #32
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d03c      	beq.n	8001d7a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d01c      	beq.n	8001d42 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d08:	4b9d      	ldr	r3, [pc, #628]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d0e:	4a9c      	ldr	r2, [pc, #624]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d18:	f7fe fff6 	bl	8000d08 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d20:	f7fe fff2 	bl	8000d08 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e12b      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d32:	4b93      	ldr	r3, [pc, #588]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0ef      	beq.n	8001d20 <HAL_RCC_OscConfig+0x5cc>
 8001d40:	e01b      	b.n	8001d7a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d42:	4b8f      	ldr	r3, [pc, #572]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001d44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d48:	4a8d      	ldr	r2, [pc, #564]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001d4a:	f023 0301 	bic.w	r3, r3, #1
 8001d4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d52:	f7fe ffd9 	bl	8000d08 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d5a:	f7fe ffd5 	bl	8000d08 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e10e      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d6c:	4b84      	ldr	r3, [pc, #528]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001d6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1ef      	bne.n	8001d5a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 8102 	beq.w	8001f88 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	f040 80c5 	bne.w	8001f18 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d8e:	4b7c      	ldr	r3, [pc, #496]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f003 0203 	and.w	r2, r3, #3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d12c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	3b01      	subs	r3, #1
 8001dae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d123      	bne.n	8001dfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dbe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d11b      	bne.n	8001dfc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d113      	bne.n	8001dfc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dde:	085b      	lsrs	r3, r3, #1
 8001de0:	3b01      	subs	r3, #1
 8001de2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d109      	bne.n	8001dfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	085b      	lsrs	r3, r3, #1
 8001df4:	3b01      	subs	r3, #1
 8001df6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d067      	beq.n	8001ecc <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	2b0c      	cmp	r3, #12
 8001e00:	d062      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e02:	4b5f      	ldr	r3, [pc, #380]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e0bb      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e12:	4b5b      	ldr	r3, [pc, #364]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a5a      	ldr	r2, [pc, #360]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001e18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e1c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e1e:	f7fe ff73 	bl	8000d08 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e26:	f7fe ff6f 	bl	8000d08 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e0a8      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e38:	4b51      	ldr	r3, [pc, #324]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1f0      	bne.n	8001e26 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e44:	4b4e      	ldr	r3, [pc, #312]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	4b4e      	ldr	r3, [pc, #312]	; (8001f84 <HAL_RCC_OscConfig+0x830>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e54:	3a01      	subs	r2, #1
 8001e56:	0112      	lsls	r2, r2, #4
 8001e58:	4311      	orrs	r1, r2
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e5e:	0212      	lsls	r2, r2, #8
 8001e60:	4311      	orrs	r1, r2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e66:	0852      	lsrs	r2, r2, #1
 8001e68:	3a01      	subs	r2, #1
 8001e6a:	0552      	lsls	r2, r2, #21
 8001e6c:	4311      	orrs	r1, r2
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e72:	0852      	lsrs	r2, r2, #1
 8001e74:	3a01      	subs	r2, #1
 8001e76:	0652      	lsls	r2, r2, #25
 8001e78:	4311      	orrs	r1, r2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e7e:	06d2      	lsls	r2, r2, #27
 8001e80:	430a      	orrs	r2, r1
 8001e82:	493f      	ldr	r1, [pc, #252]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e88:	4b3d      	ldr	r3, [pc, #244]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a3c      	ldr	r2, [pc, #240]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e94:	4b3a      	ldr	r3, [pc, #232]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4a39      	ldr	r2, [pc, #228]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ea0:	f7fe ff32 	bl	8000d08 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea8:	f7fe ff2e 	bl	8000d08 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e067      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eba:	4b31      	ldr	r3, [pc, #196]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f0      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ec6:	e05f      	b.n	8001f88 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e05e      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ecc:	4b2c      	ldr	r3, [pc, #176]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d157      	bne.n	8001f88 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ed8:	4b29      	ldr	r3, [pc, #164]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a28      	ldr	r2, [pc, #160]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ee2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ee4:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	4a25      	ldr	r2, [pc, #148]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ef0:	f7fe ff0a 	bl	8000d08 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7fe ff06 	bl	8000d08 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e03f      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f0a:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x7a4>
 8001f16:	e037      	b.n	8001f88 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2b0c      	cmp	r3, #12
 8001f1c:	d02d      	beq.n	8001f7a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1e:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a17      	ldr	r2, [pc, #92]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001f24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f28:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d105      	bne.n	8001f42 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	4a11      	ldr	r2, [pc, #68]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001f3c:	f023 0303 	bic.w	r3, r3, #3
 8001f40:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001f42:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001f48:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f50:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f52:	f7fe fed9 	bl	8000d08 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5a:	f7fe fed5 	bl	8000d08 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e00e      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f6c:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <HAL_RCC_OscConfig+0x82c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1f0      	bne.n	8001f5a <HAL_RCC_OscConfig+0x806>
 8001f78:	e006      	b.n	8001f88 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e005      	b.n	8001f8a <HAL_RCC_OscConfig+0x836>
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000
 8001f84:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3720      	adds	r7, #32
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop

08001f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0c8      	b.n	800213a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b66      	ldr	r3, [pc, #408]	; (8002144 <HAL_RCC_ClockConfig+0x1b0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d910      	bls.n	8001fd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b63      	ldr	r3, [pc, #396]	; (8002144 <HAL_RCC_ClockConfig+0x1b0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 0207 	bic.w	r2, r3, #7
 8001fbe:	4961      	ldr	r1, [pc, #388]	; (8002144 <HAL_RCC_ClockConfig+0x1b0>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b5f      	ldr	r3, [pc, #380]	; (8002144 <HAL_RCC_ClockConfig+0x1b0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0b0      	b.n	800213a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d04c      	beq.n	800207e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d107      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fec:	4b56      	ldr	r3, [pc, #344]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d121      	bne.n	800203c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e09e      	b.n	800213a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b02      	cmp	r3, #2
 8002002:	d107      	bne.n	8002014 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002004:	4b50      	ldr	r3, [pc, #320]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d115      	bne.n	800203c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e092      	b.n	800213a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d107      	bne.n	800202c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800201c:	4b4a      	ldr	r3, [pc, #296]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d109      	bne.n	800203c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e086      	b.n	800213a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800202c:	4b46      	ldr	r3, [pc, #280]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e07e      	b.n	800213a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800203c:	4b42      	ldr	r3, [pc, #264]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f023 0203 	bic.w	r2, r3, #3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	493f      	ldr	r1, [pc, #252]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 800204a:	4313      	orrs	r3, r2
 800204c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800204e:	f7fe fe5b 	bl	8000d08 <HAL_GetTick>
 8002052:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002054:	e00a      	b.n	800206c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002056:	f7fe fe57 	bl	8000d08 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	f241 3288 	movw	r2, #5000	; 0x1388
 8002064:	4293      	cmp	r3, r2
 8002066:	d901      	bls.n	800206c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e066      	b.n	800213a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206c:	4b36      	ldr	r3, [pc, #216]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 020c 	and.w	r2, r3, #12
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	429a      	cmp	r2, r3
 800207c:	d1eb      	bne.n	8002056 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d008      	beq.n	800209c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800208a:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	492c      	ldr	r1, [pc, #176]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 8002098:	4313      	orrs	r3, r2
 800209a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800209c:	4b29      	ldr	r3, [pc, #164]	; (8002144 <HAL_RCC_ClockConfig+0x1b0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d210      	bcs.n	80020cc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020aa:	4b26      	ldr	r3, [pc, #152]	; (8002144 <HAL_RCC_ClockConfig+0x1b0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 0207 	bic.w	r2, r3, #7
 80020b2:	4924      	ldr	r1, [pc, #144]	; (8002144 <HAL_RCC_ClockConfig+0x1b0>)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ba:	4b22      	ldr	r3, [pc, #136]	; (8002144 <HAL_RCC_ClockConfig+0x1b0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e036      	b.n	800213a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d008      	beq.n	80020ea <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d8:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4918      	ldr	r1, [pc, #96]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d009      	beq.n	800210a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020f6:	4b14      	ldr	r3, [pc, #80]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4910      	ldr	r1, [pc, #64]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800210a:	f000 f825 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 800210e:	4601      	mov	r1, r0
 8002110:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	091b      	lsrs	r3, r3, #4
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	4a0c      	ldr	r2, [pc, #48]	; (800214c <HAL_RCC_ClockConfig+0x1b8>)
 800211c:	5cd3      	ldrb	r3, [r2, r3]
 800211e:	f003 031f 	and.w	r3, r3, #31
 8002122:	fa21 f303 	lsr.w	r3, r1, r3
 8002126:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe fd9e 	bl	8000c70 <HAL_InitTick>
 8002134:	4603      	mov	r3, r0
 8002136:	72fb      	strb	r3, [r7, #11]

  return status;
 8002138:	7afb      	ldrb	r3, [r7, #11]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40022000 	.word	0x40022000
 8002148:	40021000 	.word	0x40021000
 800214c:	080037dc 	.word	0x080037dc
 8002150:	20000000 	.word	0x20000000
 8002154:	20000004 	.word	0x20000004

08002158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	; 0x24
 800215c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	2300      	movs	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002166:	4b3d      	ldr	r3, [pc, #244]	; (800225c <HAL_RCC_GetSysClockFreq+0x104>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002170:	4b3a      	ldr	r3, [pc, #232]	; (800225c <HAL_RCC_GetSysClockFreq+0x104>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_RCC_GetSysClockFreq+0x34>
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	2b0c      	cmp	r3, #12
 8002184:	d121      	bne.n	80021ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d11e      	bne.n	80021ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800218c:	4b33      	ldr	r3, [pc, #204]	; (800225c <HAL_RCC_GetSysClockFreq+0x104>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	2b00      	cmp	r3, #0
 8002196:	d107      	bne.n	80021a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002198:	4b30      	ldr	r3, [pc, #192]	; (800225c <HAL_RCC_GetSysClockFreq+0x104>)
 800219a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	e005      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021a8:	4b2c      	ldr	r3, [pc, #176]	; (800225c <HAL_RCC_GetSysClockFreq+0x104>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021b4:	4a2a      	ldr	r2, [pc, #168]	; (8002260 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10d      	bne.n	80021e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d102      	bne.n	80021d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021d0:	4b24      	ldr	r3, [pc, #144]	; (8002264 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021d2:	61bb      	str	r3, [r7, #24]
 80021d4:	e004      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021dc:	4b22      	ldr	r3, [pc, #136]	; (8002268 <HAL_RCC_GetSysClockFreq+0x110>)
 80021de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	2b0c      	cmp	r3, #12
 80021e4:	d133      	bne.n	800224e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021e6:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_RCC_GetSysClockFreq+0x104>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d002      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0xa4>
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d003      	beq.n	8002202 <HAL_RCC_GetSysClockFreq+0xaa>
 80021fa:	e005      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021fc:	4b19      	ldr	r3, [pc, #100]	; (8002264 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021fe:	617b      	str	r3, [r7, #20]
      break;
 8002200:	e005      	b.n	800220e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002202:	4b19      	ldr	r3, [pc, #100]	; (8002268 <HAL_RCC_GetSysClockFreq+0x110>)
 8002204:	617b      	str	r3, [r7, #20]
      break;
 8002206:	e002      	b.n	800220e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	617b      	str	r3, [r7, #20]
      break;
 800220c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800220e:	4b13      	ldr	r3, [pc, #76]	; (800225c <HAL_RCC_GetSysClockFreq+0x104>)
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	091b      	lsrs	r3, r3, #4
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	3301      	adds	r3, #1
 800221a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <HAL_RCC_GetSysClockFreq+0x104>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	0a1b      	lsrs	r3, r3, #8
 8002222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	fb02 f203 	mul.w	r2, r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002232:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002234:	4b09      	ldr	r3, [pc, #36]	; (800225c <HAL_RCC_GetSysClockFreq+0x104>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	0e5b      	lsrs	r3, r3, #25
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	3301      	adds	r3, #1
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	fbb2 f3f3 	udiv	r3, r2, r3
 800224c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800224e:	69bb      	ldr	r3, [r7, #24]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3724      	adds	r7, #36	; 0x24
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	40021000 	.word	0x40021000
 8002260:	080037f4 	.word	0x080037f4
 8002264:	00f42400 	.word	0x00f42400
 8002268:	007a1200 	.word	0x007a1200

0800226c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002270:	4b03      	ldr	r3, [pc, #12]	; (8002280 <HAL_RCC_GetHCLKFreq+0x14>)
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000000 	.word	0x20000000

08002284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002288:	f7ff fff0 	bl	800226c <HAL_RCC_GetHCLKFreq>
 800228c:	4601      	mov	r1, r0
 800228e:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	0a1b      	lsrs	r3, r3, #8
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	4a04      	ldr	r2, [pc, #16]	; (80022ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800229a:	5cd3      	ldrb	r3, [r2, r3]
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000
 80022ac:	080037ec 	.word	0x080037ec

080022b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022b4:	f7ff ffda 	bl	800226c <HAL_RCC_GetHCLKFreq>
 80022b8:	4601      	mov	r1, r0
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	0adb      	lsrs	r3, r3, #11
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	4a04      	ldr	r2, [pc, #16]	; (80022d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022c6:	5cd3      	ldrb	r3, [r2, r3]
 80022c8:	f003 031f 	and.w	r3, r3, #31
 80022cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40021000 	.word	0x40021000
 80022d8:	080037ec 	.word	0x080037ec

080022dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022e4:	2300      	movs	r3, #0
 80022e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022e8:	4b2a      	ldr	r3, [pc, #168]	; (8002394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022f4:	f7ff f9ca 	bl	800168c <HAL_PWREx_GetVoltageRange>
 80022f8:	6178      	str	r0, [r7, #20]
 80022fa:	e014      	b.n	8002326 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022fc:	4b25      	ldr	r3, [pc, #148]	; (8002394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002300:	4a24      	ldr	r2, [pc, #144]	; (8002394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002306:	6593      	str	r3, [r2, #88]	; 0x58
 8002308:	4b22      	ldr	r3, [pc, #136]	; (8002394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800230a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002314:	f7ff f9ba 	bl	800168c <HAL_PWREx_GetVoltageRange>
 8002318:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800231a:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800231c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231e:	4a1d      	ldr	r2, [pc, #116]	; (8002394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002324:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800232c:	d10b      	bne.n	8002346 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b80      	cmp	r3, #128	; 0x80
 8002332:	d919      	bls.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2ba0      	cmp	r3, #160	; 0xa0
 8002338:	d902      	bls.n	8002340 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800233a:	2302      	movs	r3, #2
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	e013      	b.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002340:	2301      	movs	r3, #1
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	e010      	b.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b80      	cmp	r3, #128	; 0x80
 800234a:	d902      	bls.n	8002352 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800234c:	2303      	movs	r3, #3
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	e00a      	b.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b80      	cmp	r3, #128	; 0x80
 8002356:	d102      	bne.n	800235e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002358:	2302      	movs	r3, #2
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	e004      	b.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b70      	cmp	r3, #112	; 0x70
 8002362:	d101      	bne.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002364:	2301      	movs	r3, #1
 8002366:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f023 0207 	bic.w	r2, r3, #7
 8002370:	4909      	ldr	r1, [pc, #36]	; (8002398 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002378:	4b07      	ldr	r3, [pc, #28]	; (8002398 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	429a      	cmp	r2, r3
 8002384:	d001      	beq.n	800238a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	40022000 	.word	0x40022000

0800239c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023a4:	2300      	movs	r3, #0
 80023a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023a8:	2300      	movs	r3, #0
 80023aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d02f      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023c0:	d005      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x32>
 80023c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023c6:	d015      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d007      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80023cc:	e00f      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80023ce:	4b5d      	ldr	r3, [pc, #372]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	4a5c      	ldr	r2, [pc, #368]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023da:	e00c      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3304      	adds	r3, #4
 80023e0:	2100      	movs	r1, #0
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 fa1e 	bl	8002824 <RCCEx_PLLSAI1_Config>
 80023e8:	4603      	mov	r3, r0
 80023ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023ec:	e003      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	74fb      	strb	r3, [r7, #19]
      break;
 80023f2:	e000      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80023f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023f6:	7cfb      	ldrb	r3, [r7, #19]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10b      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023fc:	4b51      	ldr	r3, [pc, #324]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002402:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	494e      	ldr	r1, [pc, #312]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002412:	e001      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 809e 	beq.w	8002562 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002426:	2300      	movs	r3, #0
 8002428:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800242a:	4b46      	ldr	r3, [pc, #280]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800242c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800243a:	2300      	movs	r3, #0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00d      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002440:	4b40      	ldr	r3, [pc, #256]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002444:	4a3f      	ldr	r2, [pc, #252]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244a:	6593      	str	r3, [r2, #88]	; 0x58
 800244c:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800244e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002458:	2301      	movs	r3, #1
 800245a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800245c:	4b3a      	ldr	r3, [pc, #232]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a39      	ldr	r2, [pc, #228]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002466:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002468:	f7fe fc4e 	bl	8000d08 <HAL_GetTick>
 800246c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800246e:	e009      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002470:	f7fe fc4a 	bl	8000d08 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d902      	bls.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	74fb      	strb	r3, [r7, #19]
        break;
 8002482:	e005      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002484:	4b30      	ldr	r3, [pc, #192]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0ef      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002490:	7cfb      	ldrb	r3, [r7, #19]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d15a      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002496:	4b2b      	ldr	r3, [pc, #172]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d01e      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d019      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024b2:	4b24      	ldr	r3, [pc, #144]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024be:	4b21      	ldr	r3, [pc, #132]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80024c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c4:	4a1f      	ldr	r2, [pc, #124]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80024c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024ce:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80024d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d4:	4a1b      	ldr	r2, [pc, #108]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80024d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024de:	4a19      	ldr	r2, [pc, #100]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d016      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe fc0a 	bl	8000d08 <HAL_GetTick>
 80024f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024f6:	e00b      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f8:	f7fe fc06 	bl	8000d08 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f241 3288 	movw	r2, #5000	; 0x1388
 8002506:	4293      	cmp	r3, r2
 8002508:	d902      	bls.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	74fb      	strb	r3, [r7, #19]
            break;
 800250e:	e006      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0ec      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800251e:	7cfb      	ldrb	r3, [r7, #19]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10b      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002524:	4b07      	ldr	r3, [pc, #28]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002532:	4904      	ldr	r1, [pc, #16]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800253a:	e009      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800253c:	7cfb      	ldrb	r3, [r7, #19]
 800253e:	74bb      	strb	r3, [r7, #18]
 8002540:	e006      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000
 8002548:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800254c:	7cfb      	ldrb	r3, [r7, #19]
 800254e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002550:	7c7b      	ldrb	r3, [r7, #17]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d105      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002556:	4bb2      	ldr	r3, [pc, #712]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255a:	4ab1      	ldr	r2, [pc, #708]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800255c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002560:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800256e:	4bac      	ldr	r3, [pc, #688]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002574:	f023 0203 	bic.w	r2, r3, #3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	49a8      	ldr	r1, [pc, #672]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00a      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002590:	4ba3      	ldr	r3, [pc, #652]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002596:	f023 020c 	bic.w	r2, r3, #12
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	49a0      	ldr	r1, [pc, #640]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00a      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025b2:	4b9b      	ldr	r3, [pc, #620]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80025b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	4997      	ldr	r1, [pc, #604]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0320 	and.w	r3, r3, #32
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00a      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025d4:	4b92      	ldr	r3, [pc, #584]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e2:	498f      	ldr	r1, [pc, #572]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025f6:	4b8a      	ldr	r3, [pc, #552]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002604:	4986      	ldr	r1, [pc, #536]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00a      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002618:	4b81      	ldr	r3, [pc, #516]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	497e      	ldr	r1, [pc, #504]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00a      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800263a:	4b79      	ldr	r3, [pc, #484]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800263c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002640:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	4975      	ldr	r1, [pc, #468]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00a      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800265c:	4b70      	ldr	r3, [pc, #448]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800266a:	496d      	ldr	r1, [pc, #436]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00a      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800267e:	4b68      	ldr	r3, [pc, #416]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002684:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268c:	4964      	ldr	r1, [pc, #400]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d028      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026a0:	4b5f      	ldr	r3, [pc, #380]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ae:	495c      	ldr	r1, [pc, #368]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026be:	d106      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026c0:	4b57      	ldr	r3, [pc, #348]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4a56      	ldr	r2, [pc, #344]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80026c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ca:	60d3      	str	r3, [r2, #12]
 80026cc:	e011      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026d6:	d10c      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3304      	adds	r3, #4
 80026dc:	2101      	movs	r1, #1
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 f8a0 	bl	8002824 <RCCEx_PLLSAI1_Config>
 80026e4:	4603      	mov	r3, r0
 80026e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026e8:	7cfb      	ldrb	r3, [r7, #19]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 80026ee:	7cfb      	ldrb	r3, [r7, #19]
 80026f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d028      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026fe:	4b48      	ldr	r3, [pc, #288]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002704:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270c:	4944      	ldr	r1, [pc, #272]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002718:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800271c:	d106      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800271e:	4b40      	ldr	r3, [pc, #256]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	4a3f      	ldr	r2, [pc, #252]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002728:	60d3      	str	r3, [r2, #12]
 800272a:	e011      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002730:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002734:	d10c      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3304      	adds	r3, #4
 800273a:	2101      	movs	r1, #1
 800273c:	4618      	mov	r0, r3
 800273e:	f000 f871 	bl	8002824 <RCCEx_PLLSAI1_Config>
 8002742:	4603      	mov	r3, r0
 8002744:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002746:	7cfb      	ldrb	r3, [r7, #19]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 800274c:	7cfb      	ldrb	r3, [r7, #19]
 800274e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d028      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800275c:	4b30      	ldr	r3, [pc, #192]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002762:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800276a:	492d      	ldr	r1, [pc, #180]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002776:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800277a:	d106      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800277c:	4b28      	ldr	r3, [pc, #160]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4a27      	ldr	r2, [pc, #156]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002782:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002786:	60d3      	str	r3, [r2, #12]
 8002788:	e011      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800278e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002792:	d10c      	bne.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3304      	adds	r3, #4
 8002798:	2101      	movs	r1, #1
 800279a:	4618      	mov	r0, r3
 800279c:	f000 f842 	bl	8002824 <RCCEx_PLLSAI1_Config>
 80027a0:	4603      	mov	r3, r0
 80027a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027a4:	7cfb      	ldrb	r3, [r7, #19]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 80027aa:	7cfb      	ldrb	r3, [r7, #19]
 80027ac:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d01c      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027ba:	4b19      	ldr	r3, [pc, #100]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80027bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c8:	4915      	ldr	r1, [pc, #84]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027d8:	d10c      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3304      	adds	r3, #4
 80027de:	2102      	movs	r1, #2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 f81f 	bl	8002824 <RCCEx_PLLSAI1_Config>
 80027e6:	4603      	mov	r3, r0
 80027e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027ea:	7cfb      	ldrb	r3, [r7, #19]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 80027f0:	7cfb      	ldrb	r3, [r7, #19]
 80027f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002800:	4b07      	ldr	r3, [pc, #28]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002806:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280e:	4904      	ldr	r1, [pc, #16]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002816:	7cbb      	ldrb	r3, [r7, #18]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40021000 	.word	0x40021000

08002824 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002832:	4b73      	ldr	r3, [pc, #460]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d018      	beq.n	8002870 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800283e:	4b70      	ldr	r3, [pc, #448]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f003 0203 	and.w	r2, r3, #3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d10d      	bne.n	800286a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
       ||
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002856:	4b6a      	ldr	r3, [pc, #424]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
       ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d044      	beq.n	80028f4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	73fb      	strb	r3, [r7, #15]
 800286e:	e041      	b.n	80028f4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d00c      	beq.n	8002892 <RCCEx_PLLSAI1_Config+0x6e>
 8002878:	2b03      	cmp	r3, #3
 800287a:	d013      	beq.n	80028a4 <RCCEx_PLLSAI1_Config+0x80>
 800287c:	2b01      	cmp	r3, #1
 800287e:	d120      	bne.n	80028c2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002880:	4b5f      	ldr	r3, [pc, #380]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d11d      	bne.n	80028c8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002890:	e01a      	b.n	80028c8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002892:	4b5b      	ldr	r3, [pc, #364]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289a:	2b00      	cmp	r3, #0
 800289c:	d116      	bne.n	80028cc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a2:	e013      	b.n	80028cc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028a4:	4b56      	ldr	r3, [pc, #344]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10f      	bne.n	80028d0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028b0:	4b53      	ldr	r3, [pc, #332]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d109      	bne.n	80028d0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028c0:	e006      	b.n	80028d0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
      break;
 80028c6:	e004      	b.n	80028d2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80028c8:	bf00      	nop
 80028ca:	e002      	b.n	80028d2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80028cc:	bf00      	nop
 80028ce:	e000      	b.n	80028d2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80028d0:	bf00      	nop
    }

    if(status == HAL_OK)
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10d      	bne.n	80028f4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028d8:	4b49      	ldr	r3, [pc, #292]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6819      	ldr	r1, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	3b01      	subs	r3, #1
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	430b      	orrs	r3, r1
 80028ee:	4944      	ldr	r1, [pc, #272]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d17c      	bne.n	80029f4 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028fa:	4b41      	ldr	r3, [pc, #260]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a40      	ldr	r2, [pc, #256]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002900:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002904:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002906:	f7fe f9ff 	bl	8000d08 <HAL_GetTick>
 800290a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800290c:	e009      	b.n	8002922 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800290e:	f7fe f9fb 	bl	8000d08 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d902      	bls.n	8002922 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	73fb      	strb	r3, [r7, #15]
        break;
 8002920:	e005      	b.n	800292e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002922:	4b37      	ldr	r3, [pc, #220]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1ef      	bne.n	800290e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d15f      	bne.n	80029f4 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d110      	bne.n	800295c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800293a:	4b31      	ldr	r3, [pc, #196]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002942:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6892      	ldr	r2, [r2, #8]
 800294a:	0211      	lsls	r1, r2, #8
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	68d2      	ldr	r2, [r2, #12]
 8002950:	06d2      	lsls	r2, r2, #27
 8002952:	430a      	orrs	r2, r1
 8002954:	492a      	ldr	r1, [pc, #168]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002956:	4313      	orrs	r3, r2
 8002958:	610b      	str	r3, [r1, #16]
 800295a:	e027      	b.n	80029ac <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d112      	bne.n	8002988 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002962:	4b27      	ldr	r3, [pc, #156]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800296a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6892      	ldr	r2, [r2, #8]
 8002972:	0211      	lsls	r1, r2, #8
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6912      	ldr	r2, [r2, #16]
 8002978:	0852      	lsrs	r2, r2, #1
 800297a:	3a01      	subs	r2, #1
 800297c:	0552      	lsls	r2, r2, #21
 800297e:	430a      	orrs	r2, r1
 8002980:	491f      	ldr	r1, [pc, #124]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002982:	4313      	orrs	r3, r2
 8002984:	610b      	str	r3, [r1, #16]
 8002986:	e011      	b.n	80029ac <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002988:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002990:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6892      	ldr	r2, [r2, #8]
 8002998:	0211      	lsls	r1, r2, #8
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6952      	ldr	r2, [r2, #20]
 800299e:	0852      	lsrs	r2, r2, #1
 80029a0:	3a01      	subs	r2, #1
 80029a2:	0652      	lsls	r2, r2, #25
 80029a4:	430a      	orrs	r2, r1
 80029a6:	4916      	ldr	r1, [pc, #88]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029ac:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a13      	ldr	r2, [pc, #76]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b8:	f7fe f9a6 	bl	8000d08 <HAL_GetTick>
 80029bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029be:	e009      	b.n	80029d4 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029c0:	f7fe f9a2 	bl	8000d08 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d902      	bls.n	80029d4 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	73fb      	strb	r3, [r7, #15]
          break;
 80029d2:	e005      	b.n	80029e0 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0ef      	beq.n	80029c0 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d106      	bne.n	80029f4 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	4904      	ldr	r1, [pc, #16]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000

08002a04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e040      	b.n	8002a98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7fd ffea 	bl	8000a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2224      	movs	r2, #36	; 0x24
 8002a30:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0201 	bic.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f958 	bl	8002cf8 <UART_SetConfig>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e022      	b.n	8002a98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fc60 	bl	8003320 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 fce7 	bl	8003464 <UART_CheckIdleState>
 8002a96:	4603      	mov	r3, r0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	; 0x28
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	4613      	mov	r3, r2
 8002aae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	f040 8081 	bne.w	8002bbc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <HAL_UART_Transmit+0x26>
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e079      	b.n	8002bbe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_UART_Transmit+0x38>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e072      	b.n	8002bbe <HAL_UART_Transmit+0x11e>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2221      	movs	r2, #33	; 0x21
 8002aea:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002aec:	f7fe f90c 	bl	8000d08 <HAL_GetTick>
 8002af0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	88fa      	ldrh	r2, [r7, #6]
 8002af6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	88fa      	ldrh	r2, [r7, #6]
 8002afe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b0a:	d108      	bne.n	8002b1e <HAL_UART_Transmit+0x7e>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d104      	bne.n	8002b1e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	61bb      	str	r3, [r7, #24]
 8002b1c:	e003      	b.n	8002b26 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002b2e:	e02d      	b.n	8002b8c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2200      	movs	r2, #0
 8002b38:	2180      	movs	r1, #128	; 0x80
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 fcd7 	bl	80034ee <UART_WaitOnFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e039      	b.n	8002bbe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10b      	bne.n	8002b68 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	881a      	ldrh	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b5c:	b292      	uxth	r2, r2
 8002b5e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	3302      	adds	r3, #2
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	e008      	b.n	8002b7a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	781a      	ldrb	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	b292      	uxth	r2, r2
 8002b72:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	3301      	adds	r3, #1
 8002b78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1cb      	bne.n	8002b30 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2140      	movs	r1, #64	; 0x40
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fca3 	bl	80034ee <UART_WaitOnFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e005      	b.n	8002bbe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e000      	b.n	8002bbe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002bbc:	2302      	movs	r3, #2
  }
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3720      	adds	r7, #32
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bda:	2b20      	cmp	r3, #32
 8002bdc:	d16c      	bne.n	8002cb8 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <HAL_UART_Receive_DMA+0x22>
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e065      	b.n	8002cba <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_UART_Receive_DMA+0x34>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e05e      	b.n	8002cba <HAL_UART_Receive_DMA+0xf2>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	88fa      	ldrh	r2, [r7, #6]
 8002c0e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2222      	movs	r2, #34	; 0x22
 8002c1c:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d02a      	beq.n	8002c7c <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c2a:	4a26      	ldr	r2, [pc, #152]	; (8002cc4 <HAL_UART_Receive_DMA+0xfc>)
 8002c2c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c32:	4a25      	ldr	r2, [pc, #148]	; (8002cc8 <HAL_UART_Receive_DMA+0x100>)
 8002c34:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c3a:	4a24      	ldr	r2, [pc, #144]	; (8002ccc <HAL_UART_Receive_DMA+0x104>)
 8002c3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c42:	2200      	movs	r2, #0
 8002c44:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	3324      	adds	r3, #36	; 0x24
 8002c50:	4619      	mov	r1, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c56:	461a      	mov	r2, r3
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	f7fe fa2b 	bl	80010b4 <HAL_DMA_Start_IT>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00b      	beq.n	8002c7c <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2210      	movs	r2, #16
 8002c68:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2220      	movs	r2, #32
 8002c76:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e01e      	b.n	8002cba <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c92:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0201 	orr.w	r2, r2, #1
 8002ca2:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cb2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e000      	b.n	8002cba <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8002cb8:	2302      	movs	r3, #2
  }
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	0800364f 	.word	0x0800364f
 8002cc8:	080036b7 	.word	0x080036b7
 8002ccc:	080036d3 	.word	0x080036d3

08002cd0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cf8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002cfc:	b08a      	sub	sp, #40	; 0x28
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4bbc      	ldr	r3, [pc, #752]	; (8003020 <UART_SetConfig+0x328>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d36:	430b      	orrs	r3, r1
 8002d38:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4ab2      	ldr	r2, [pc, #712]	; (8003024 <UART_SetConfig+0x32c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d004      	beq.n	8002d6a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d66:	4313      	orrs	r3, r2
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4aa9      	ldr	r2, [pc, #676]	; (8003028 <UART_SetConfig+0x330>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d126      	bne.n	8002dd6 <UART_SetConfig+0xde>
 8002d88:	4ba8      	ldr	r3, [pc, #672]	; (800302c <UART_SetConfig+0x334>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d81a      	bhi.n	8002dcc <UART_SetConfig+0xd4>
 8002d96:	a201      	add	r2, pc, #4	; (adr r2, 8002d9c <UART_SetConfig+0xa4>)
 8002d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9c:	08002dad 	.word	0x08002dad
 8002da0:	08002dbd 	.word	0x08002dbd
 8002da4:	08002db5 	.word	0x08002db5
 8002da8:	08002dc5 	.word	0x08002dc5
 8002dac:	2301      	movs	r3, #1
 8002dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002db2:	e0ab      	b.n	8002f0c <UART_SetConfig+0x214>
 8002db4:	2302      	movs	r3, #2
 8002db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dba:	e0a7      	b.n	8002f0c <UART_SetConfig+0x214>
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dc2:	e0a3      	b.n	8002f0c <UART_SetConfig+0x214>
 8002dc4:	2308      	movs	r3, #8
 8002dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dca:	e09f      	b.n	8002f0c <UART_SetConfig+0x214>
 8002dcc:	2310      	movs	r3, #16
 8002dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dd2:	bf00      	nop
 8002dd4:	e09a      	b.n	8002f0c <UART_SetConfig+0x214>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a95      	ldr	r2, [pc, #596]	; (8003030 <UART_SetConfig+0x338>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d138      	bne.n	8002e52 <UART_SetConfig+0x15a>
 8002de0:	4b92      	ldr	r3, [pc, #584]	; (800302c <UART_SetConfig+0x334>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b0c      	cmp	r3, #12
 8002dec:	d82c      	bhi.n	8002e48 <UART_SetConfig+0x150>
 8002dee:	a201      	add	r2, pc, #4	; (adr r2, 8002df4 <UART_SetConfig+0xfc>)
 8002df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df4:	08002e29 	.word	0x08002e29
 8002df8:	08002e49 	.word	0x08002e49
 8002dfc:	08002e49 	.word	0x08002e49
 8002e00:	08002e49 	.word	0x08002e49
 8002e04:	08002e39 	.word	0x08002e39
 8002e08:	08002e49 	.word	0x08002e49
 8002e0c:	08002e49 	.word	0x08002e49
 8002e10:	08002e49 	.word	0x08002e49
 8002e14:	08002e31 	.word	0x08002e31
 8002e18:	08002e49 	.word	0x08002e49
 8002e1c:	08002e49 	.word	0x08002e49
 8002e20:	08002e49 	.word	0x08002e49
 8002e24:	08002e41 	.word	0x08002e41
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e2e:	e06d      	b.n	8002f0c <UART_SetConfig+0x214>
 8002e30:	2302      	movs	r3, #2
 8002e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e36:	e069      	b.n	8002f0c <UART_SetConfig+0x214>
 8002e38:	2304      	movs	r3, #4
 8002e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e3e:	e065      	b.n	8002f0c <UART_SetConfig+0x214>
 8002e40:	2308      	movs	r3, #8
 8002e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e46:	e061      	b.n	8002f0c <UART_SetConfig+0x214>
 8002e48:	2310      	movs	r3, #16
 8002e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e4e:	bf00      	nop
 8002e50:	e05c      	b.n	8002f0c <UART_SetConfig+0x214>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a77      	ldr	r2, [pc, #476]	; (8003034 <UART_SetConfig+0x33c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d125      	bne.n	8002ea8 <UART_SetConfig+0x1b0>
 8002e5c:	4b73      	ldr	r3, [pc, #460]	; (800302c <UART_SetConfig+0x334>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e66:	2b10      	cmp	r3, #16
 8002e68:	d011      	beq.n	8002e8e <UART_SetConfig+0x196>
 8002e6a:	2b10      	cmp	r3, #16
 8002e6c:	d802      	bhi.n	8002e74 <UART_SetConfig+0x17c>
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d005      	beq.n	8002e7e <UART_SetConfig+0x186>
 8002e72:	e014      	b.n	8002e9e <UART_SetConfig+0x1a6>
 8002e74:	2b20      	cmp	r3, #32
 8002e76:	d006      	beq.n	8002e86 <UART_SetConfig+0x18e>
 8002e78:	2b30      	cmp	r3, #48	; 0x30
 8002e7a:	d00c      	beq.n	8002e96 <UART_SetConfig+0x19e>
 8002e7c:	e00f      	b.n	8002e9e <UART_SetConfig+0x1a6>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e84:	e042      	b.n	8002f0c <UART_SetConfig+0x214>
 8002e86:	2302      	movs	r3, #2
 8002e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e8c:	e03e      	b.n	8002f0c <UART_SetConfig+0x214>
 8002e8e:	2304      	movs	r3, #4
 8002e90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e94:	e03a      	b.n	8002f0c <UART_SetConfig+0x214>
 8002e96:	2308      	movs	r3, #8
 8002e98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e9c:	e036      	b.n	8002f0c <UART_SetConfig+0x214>
 8002e9e:	2310      	movs	r3, #16
 8002ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ea4:	bf00      	nop
 8002ea6:	e031      	b.n	8002f0c <UART_SetConfig+0x214>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a5d      	ldr	r2, [pc, #372]	; (8003024 <UART_SetConfig+0x32c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d129      	bne.n	8002f06 <UART_SetConfig+0x20e>
 8002eb2:	4b5e      	ldr	r3, [pc, #376]	; (800302c <UART_SetConfig+0x334>)
 8002eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec0:	d014      	beq.n	8002eec <UART_SetConfig+0x1f4>
 8002ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec6:	d802      	bhi.n	8002ece <UART_SetConfig+0x1d6>
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d007      	beq.n	8002edc <UART_SetConfig+0x1e4>
 8002ecc:	e016      	b.n	8002efc <UART_SetConfig+0x204>
 8002ece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ed2:	d007      	beq.n	8002ee4 <UART_SetConfig+0x1ec>
 8002ed4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ed8:	d00c      	beq.n	8002ef4 <UART_SetConfig+0x1fc>
 8002eda:	e00f      	b.n	8002efc <UART_SetConfig+0x204>
 8002edc:	2300      	movs	r3, #0
 8002ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ee2:	e013      	b.n	8002f0c <UART_SetConfig+0x214>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eea:	e00f      	b.n	8002f0c <UART_SetConfig+0x214>
 8002eec:	2304      	movs	r3, #4
 8002eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ef2:	e00b      	b.n	8002f0c <UART_SetConfig+0x214>
 8002ef4:	2308      	movs	r3, #8
 8002ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002efa:	e007      	b.n	8002f0c <UART_SetConfig+0x214>
 8002efc:	2310      	movs	r3, #16
 8002efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f02:	bf00      	nop
 8002f04:	e002      	b.n	8002f0c <UART_SetConfig+0x214>
 8002f06:	2310      	movs	r3, #16
 8002f08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a44      	ldr	r2, [pc, #272]	; (8003024 <UART_SetConfig+0x32c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	f040 80fb 	bne.w	800310e <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d824      	bhi.n	8002f6a <UART_SetConfig+0x272>
 8002f20:	a201      	add	r2, pc, #4	; (adr r2, 8002f28 <UART_SetConfig+0x230>)
 8002f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f26:	bf00      	nop
 8002f28:	08002f4d 	.word	0x08002f4d
 8002f2c:	08002f6b 	.word	0x08002f6b
 8002f30:	08002f55 	.word	0x08002f55
 8002f34:	08002f6b 	.word	0x08002f6b
 8002f38:	08002f5b 	.word	0x08002f5b
 8002f3c:	08002f6b 	.word	0x08002f6b
 8002f40:	08002f6b 	.word	0x08002f6b
 8002f44:	08002f6b 	.word	0x08002f6b
 8002f48:	08002f63 	.word	0x08002f63
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002f4c:	f7ff f99a 	bl	8002284 <HAL_RCC_GetPCLK1Freq>
 8002f50:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f52:	e00d      	b.n	8002f70 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002f54:	4b38      	ldr	r3, [pc, #224]	; (8003038 <UART_SetConfig+0x340>)
 8002f56:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f58:	e00a      	b.n	8002f70 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002f5a:	f7ff f8fd 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 8002f5e:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f60:	e006      	b.n	8002f70 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f66:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f68:	e002      	b.n	8002f70 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	76fb      	strb	r3, [r7, #27]
        break;
 8002f6e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 81c8 	beq.w	8003308 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4413      	add	r3, r2
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d305      	bcc.n	8002f94 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d902      	bls.n	8002f9a <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	76fb      	strb	r3, [r7, #27]
 8002f98:	e1b6      	b.n	8003308 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 8002f9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	f200 80a2 	bhi.w	80030e8 <UART_SetConfig+0x3f0>
 8002fa4:	a201      	add	r2, pc, #4	; (adr r2, 8002fac <UART_SetConfig+0x2b4>)
 8002fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002faa:	bf00      	nop
 8002fac:	08002fd1 	.word	0x08002fd1
 8002fb0:	080030e9 	.word	0x080030e9
 8002fb4:	0800303d 	.word	0x0800303d
 8002fb8:	080030e9 	.word	0x080030e9
 8002fbc:	08003071 	.word	0x08003071
 8002fc0:	080030e9 	.word	0x080030e9
 8002fc4:	080030e9 	.word	0x080030e9
 8002fc8:	080030e9 	.word	0x080030e9
 8002fcc:	080030bf 	.word	0x080030bf
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8002fd0:	f7ff f958 	bl	8002284 <HAL_RCC_GetPCLK1Freq>
 8002fd4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	f04f 0400 	mov.w	r4, #0
 8002fe6:	0214      	lsls	r4, r2, #8
 8002fe8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002fec:	020b      	lsls	r3, r1, #8
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6852      	ldr	r2, [r2, #4]
 8002ff2:	0852      	lsrs	r2, r2, #1
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	eb13 0b01 	adds.w	fp, r3, r1
 8002ffe:	eb44 0c02 	adc.w	ip, r4, r2
 8003002:	4658      	mov	r0, fp
 8003004:	4661      	mov	r1, ip
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f04f 0400 	mov.w	r4, #0
 800300e:	461a      	mov	r2, r3
 8003010:	4623      	mov	r3, r4
 8003012:	f7fd f8e3 	bl	80001dc <__aeabi_uldivmod>
 8003016:	4603      	mov	r3, r0
 8003018:	460c      	mov	r4, r1
 800301a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800301c:	e067      	b.n	80030ee <UART_SetConfig+0x3f6>
 800301e:	bf00      	nop
 8003020:	efff69f3 	.word	0xefff69f3
 8003024:	40008000 	.word	0x40008000
 8003028:	40013800 	.word	0x40013800
 800302c:	40021000 	.word	0x40021000
 8003030:	40004400 	.word	0x40004400
 8003034:	40004800 	.word	0x40004800
 8003038:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	085b      	lsrs	r3, r3, #1
 8003042:	f04f 0400 	mov.w	r4, #0
 8003046:	49ae      	ldr	r1, [pc, #696]	; (8003300 <UART_SetConfig+0x608>)
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	eb13 0b01 	adds.w	fp, r3, r1
 8003050:	eb44 0c02 	adc.w	ip, r4, r2
 8003054:	4658      	mov	r0, fp
 8003056:	4661      	mov	r1, ip
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f04f 0400 	mov.w	r4, #0
 8003060:	461a      	mov	r2, r3
 8003062:	4623      	mov	r3, r4
 8003064:	f7fd f8ba 	bl	80001dc <__aeabi_uldivmod>
 8003068:	4603      	mov	r3, r0
 800306a:	460c      	mov	r4, r1
 800306c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800306e:	e03e      	b.n	80030ee <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003070:	f7ff f872 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 8003074:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4619      	mov	r1, r3
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	f04f 0400 	mov.w	r4, #0
 8003086:	0214      	lsls	r4, r2, #8
 8003088:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800308c:	020b      	lsls	r3, r1, #8
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6852      	ldr	r2, [r2, #4]
 8003092:	0852      	lsrs	r2, r2, #1
 8003094:	4611      	mov	r1, r2
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	eb13 0b01 	adds.w	fp, r3, r1
 800309e:	eb44 0c02 	adc.w	ip, r4, r2
 80030a2:	4658      	mov	r0, fp
 80030a4:	4661      	mov	r1, ip
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f04f 0400 	mov.w	r4, #0
 80030ae:	461a      	mov	r2, r3
 80030b0:	4623      	mov	r3, r4
 80030b2:	f7fd f893 	bl	80001dc <__aeabi_uldivmod>
 80030b6:	4603      	mov	r3, r0
 80030b8:	460c      	mov	r4, r1
 80030ba:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80030bc:	e017      	b.n	80030ee <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	085b      	lsrs	r3, r3, #1
 80030c4:	f04f 0400 	mov.w	r4, #0
 80030c8:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80030cc:	f144 0100 	adc.w	r1, r4, #0
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f04f 0400 	mov.w	r4, #0
 80030d8:	461a      	mov	r2, r3
 80030da:	4623      	mov	r3, r4
 80030dc:	f7fd f87e 	bl	80001dc <__aeabi_uldivmod>
 80030e0:	4603      	mov	r3, r0
 80030e2:	460c      	mov	r4, r1
 80030e4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80030e6:	e002      	b.n	80030ee <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	76fb      	strb	r3, [r7, #27]
            break;
 80030ec:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030f4:	d308      	bcc.n	8003108 <UART_SetConfig+0x410>
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030fc:	d204      	bcs.n	8003108 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	60da      	str	r2, [r3, #12]
 8003106:	e0ff      	b.n	8003308 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	76fb      	strb	r3, [r7, #27]
 800310c:	e0fc      	b.n	8003308 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003116:	f040 8083 	bne.w	8003220 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 800311a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800311e:	2b08      	cmp	r3, #8
 8003120:	d85e      	bhi.n	80031e0 <UART_SetConfig+0x4e8>
 8003122:	a201      	add	r2, pc, #4	; (adr r2, 8003128 <UART_SetConfig+0x430>)
 8003124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003128:	0800314d 	.word	0x0800314d
 800312c:	0800316d 	.word	0x0800316d
 8003130:	0800318d 	.word	0x0800318d
 8003134:	080031e1 	.word	0x080031e1
 8003138:	080031a9 	.word	0x080031a9
 800313c:	080031e1 	.word	0x080031e1
 8003140:	080031e1 	.word	0x080031e1
 8003144:	080031e1 	.word	0x080031e1
 8003148:	080031c9 	.word	0x080031c9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800314c:	f7ff f89a 	bl	8002284 <HAL_RCC_GetPCLK1Freq>
 8003150:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	005a      	lsls	r2, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	085b      	lsrs	r3, r3, #1
 800315c:	441a      	add	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	fbb2 f3f3 	udiv	r3, r2, r3
 8003166:	b29b      	uxth	r3, r3
 8003168:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800316a:	e03c      	b.n	80031e6 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800316c:	f7ff f8a0 	bl	80022b0 <HAL_RCC_GetPCLK2Freq>
 8003170:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	005a      	lsls	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	441a      	add	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	fbb2 f3f3 	udiv	r3, r2, r3
 8003186:	b29b      	uxth	r3, r3
 8003188:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800318a:	e02c      	b.n	80031e6 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	085b      	lsrs	r3, r3, #1
 8003192:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003196:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6852      	ldr	r2, [r2, #4]
 800319e:	fbb3 f3f2 	udiv	r3, r3, r2
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80031a6:	e01e      	b.n	80031e6 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031a8:	f7fe ffd6 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 80031ac:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	005a      	lsls	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	085b      	lsrs	r3, r3, #1
 80031b8:	441a      	add	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80031c6:	e00e      	b.n	80031e6 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	085b      	lsrs	r3, r3, #1
 80031ce:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031da:	b29b      	uxth	r3, r3
 80031dc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80031de:	e002      	b.n	80031e6 <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	76fb      	strb	r3, [r7, #27]
        break;
 80031e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	2b0f      	cmp	r3, #15
 80031ea:	d916      	bls.n	800321a <UART_SetConfig+0x522>
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f2:	d212      	bcs.n	800321a <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	f023 030f 	bic.w	r3, r3, #15
 80031fc:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	085b      	lsrs	r3, r3, #1
 8003202:	b29b      	uxth	r3, r3
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	b29a      	uxth	r2, r3
 800320a:	89fb      	ldrh	r3, [r7, #14]
 800320c:	4313      	orrs	r3, r2
 800320e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	89fa      	ldrh	r2, [r7, #14]
 8003216:	60da      	str	r2, [r3, #12]
 8003218:	e076      	b.n	8003308 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	76fb      	strb	r3, [r7, #27]
 800321e:	e073      	b.n	8003308 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 8003220:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003224:	2b08      	cmp	r3, #8
 8003226:	d85c      	bhi.n	80032e2 <UART_SetConfig+0x5ea>
 8003228:	a201      	add	r2, pc, #4	; (adr r2, 8003230 <UART_SetConfig+0x538>)
 800322a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322e:	bf00      	nop
 8003230:	08003255 	.word	0x08003255
 8003234:	08003273 	.word	0x08003273
 8003238:	08003291 	.word	0x08003291
 800323c:	080032e3 	.word	0x080032e3
 8003240:	080032ad 	.word	0x080032ad
 8003244:	080032e3 	.word	0x080032e3
 8003248:	080032e3 	.word	0x080032e3
 800324c:	080032e3 	.word	0x080032e3
 8003250:	080032cb 	.word	0x080032cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003254:	f7ff f816 	bl	8002284 <HAL_RCC_GetPCLK1Freq>
 8003258:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	085a      	lsrs	r2, r3, #1
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	441a      	add	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	fbb2 f3f3 	udiv	r3, r2, r3
 800326c:	b29b      	uxth	r3, r3
 800326e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003270:	e03a      	b.n	80032e8 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003272:	f7ff f81d 	bl	80022b0 <HAL_RCC_GetPCLK2Freq>
 8003276:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	085a      	lsrs	r2, r3, #1
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	441a      	add	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	fbb2 f3f3 	udiv	r3, r2, r3
 800328a:	b29b      	uxth	r3, r3
 800328c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800328e:	e02b      	b.n	80032e8 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	085b      	lsrs	r3, r3, #1
 8003296:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800329a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6852      	ldr	r2, [r2, #4]
 80032a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80032aa:	e01d      	b.n	80032e8 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ac:	f7fe ff54 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 80032b0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	085a      	lsrs	r2, r3, #1
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	441a      	add	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80032c8:	e00e      	b.n	80032e8 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	085b      	lsrs	r3, r3, #1
 80032d0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032dc:	b29b      	uxth	r3, r3
 80032de:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80032e0:	e002      	b.n	80032e8 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	76fb      	strb	r3, [r7, #27]
        break;
 80032e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	2b0f      	cmp	r3, #15
 80032ec:	d90a      	bls.n	8003304 <UART_SetConfig+0x60c>
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f4:	d206      	bcs.n	8003304 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	60da      	str	r2, [r3, #12]
 80032fe:	e003      	b.n	8003308 <UART_SetConfig+0x610>
 8003300:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003314:	7efb      	ldrb	r3, [r7, #27]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3728      	adds	r7, #40	; 0x28
 800331a:	46bd      	mov	sp, r7
 800331c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08003320 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00a      	beq.n	800334a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	f003 0310 	and.w	r3, r3, #16
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01a      	beq.n	8003436 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800341e:	d10a      	bne.n	8003436 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	605a      	str	r2, [r3, #4]
  }
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af02      	add	r7, sp, #8
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003472:	f7fd fc49 	bl	8000d08 <HAL_GetTick>
 8003476:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b08      	cmp	r3, #8
 8003484:	d10e      	bne.n	80034a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003486:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f82a 	bl	80034ee <UART_WaitOnFlagUntilTimeout>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e020      	b.n	80034e6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d10e      	bne.n	80034d0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f814 	bl	80034ee <UART_WaitOnFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e00a      	b.n	80034e6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	60f8      	str	r0, [r7, #12]
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	603b      	str	r3, [r7, #0]
 80034fa:	4613      	mov	r3, r2
 80034fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034fe:	e05d      	b.n	80035bc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003506:	d059      	beq.n	80035bc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003508:	f7fd fbfe 	bl	8000d08 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	429a      	cmp	r2, r3
 8003516:	d302      	bcc.n	800351e <UART_WaitOnFlagUntilTimeout+0x30>
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d11b      	bne.n	8003556 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800352c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0201 	bic.w	r2, r2, #1
 800353c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2220      	movs	r2, #32
 8003542:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e042      	b.n	80035dc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d02b      	beq.n	80035bc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800356e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003572:	d123      	bne.n	80035bc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800357c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800358c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0201 	bic.w	r2, r2, #1
 800359c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2220      	movs	r2, #32
 80035a2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2220      	movs	r2, #32
 80035ae:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e00f      	b.n	80035dc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69da      	ldr	r2, [r3, #28]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	4013      	ands	r3, r2
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	bf0c      	ite	eq
 80035cc:	2301      	moveq	r3, #1
 80035ce:	2300      	movne	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	461a      	mov	r2, r3
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d092      	beq.n	8003500 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80035fa:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2220      	movs	r2, #32
 8003600:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003624:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0201 	bic.w	r2, r2, #1
 8003634:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2220      	movs	r2, #32
 800363a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b084      	sub	sp, #16
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b00      	cmp	r3, #0
 8003668:	d11e      	bne.n	80036a8 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003680:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0201 	bic.w	r2, r2, #1
 8003690:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a0:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2220      	movs	r2, #32
 80036a6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f7fd f879 	bl	80007a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036ae:	bf00      	nop
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b084      	sub	sp, #16
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f7ff fb03 	bl	8002cd0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036ca:	bf00      	nop
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b086      	sub	sp, #24
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036de:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f6:	2b80      	cmp	r3, #128	; 0x80
 80036f8:	d109      	bne.n	800370e <UART_DMAError+0x3c>
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	2b21      	cmp	r3, #33	; 0x21
 80036fe:	d106      	bne.n	800370e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	2200      	movs	r2, #0
 8003704:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003708:	6978      	ldr	r0, [r7, #20]
 800370a:	f7ff ff6b 	bl	80035e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003718:	2b40      	cmp	r3, #64	; 0x40
 800371a:	d109      	bne.n	8003730 <UART_DMAError+0x5e>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b22      	cmp	r3, #34	; 0x22
 8003720:	d106      	bne.n	8003730 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2200      	movs	r2, #0
 8003726:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800372a:	6978      	ldr	r0, [r7, #20]
 800372c:	f7ff ff6f 	bl	800360e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003734:	f043 0210 	orr.w	r2, r3, #16
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800373c:	6978      	ldr	r0, [r7, #20]
 800373e:	f7ff fad1 	bl	8002ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003742:	bf00      	nop
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <__libc_init_array>:
 800374c:	b570      	push	{r4, r5, r6, lr}
 800374e:	4e0d      	ldr	r6, [pc, #52]	; (8003784 <__libc_init_array+0x38>)
 8003750:	4c0d      	ldr	r4, [pc, #52]	; (8003788 <__libc_init_array+0x3c>)
 8003752:	1ba4      	subs	r4, r4, r6
 8003754:	10a4      	asrs	r4, r4, #2
 8003756:	2500      	movs	r5, #0
 8003758:	42a5      	cmp	r5, r4
 800375a:	d109      	bne.n	8003770 <__libc_init_array+0x24>
 800375c:	4e0b      	ldr	r6, [pc, #44]	; (800378c <__libc_init_array+0x40>)
 800375e:	4c0c      	ldr	r4, [pc, #48]	; (8003790 <__libc_init_array+0x44>)
 8003760:	f000 f820 	bl	80037a4 <_init>
 8003764:	1ba4      	subs	r4, r4, r6
 8003766:	10a4      	asrs	r4, r4, #2
 8003768:	2500      	movs	r5, #0
 800376a:	42a5      	cmp	r5, r4
 800376c:	d105      	bne.n	800377a <__libc_init_array+0x2e>
 800376e:	bd70      	pop	{r4, r5, r6, pc}
 8003770:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003774:	4798      	blx	r3
 8003776:	3501      	adds	r5, #1
 8003778:	e7ee      	b.n	8003758 <__libc_init_array+0xc>
 800377a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800377e:	4798      	blx	r3
 8003780:	3501      	adds	r5, #1
 8003782:	e7f2      	b.n	800376a <__libc_init_array+0x1e>
 8003784:	0800382c 	.word	0x0800382c
 8003788:	0800382c 	.word	0x0800382c
 800378c:	0800382c 	.word	0x0800382c
 8003790:	08003830 	.word	0x08003830

08003794 <memset>:
 8003794:	4402      	add	r2, r0
 8003796:	4603      	mov	r3, r0
 8003798:	4293      	cmp	r3, r2
 800379a:	d100      	bne.n	800379e <memset+0xa>
 800379c:	4770      	bx	lr
 800379e:	f803 1b01 	strb.w	r1, [r3], #1
 80037a2:	e7f9      	b.n	8003798 <memset+0x4>

080037a4 <_init>:
 80037a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a6:	bf00      	nop
 80037a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037aa:	bc08      	pop	{r3}
 80037ac:	469e      	mov	lr, r3
 80037ae:	4770      	bx	lr

080037b0 <_fini>:
 80037b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b2:	bf00      	nop
 80037b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b6:	bc08      	pop	{r3}
 80037b8:	469e      	mov	lr, r3
 80037ba:	4770      	bx	lr
